// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteInstrumentIdentifierReader is a Reader for the DeleteInstrumentIdentifier structure.
type DeleteInstrumentIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInstrumentIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteInstrumentIdentifierNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteInstrumentIdentifierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInstrumentIdentifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteInstrumentIdentifierConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewDeleteInstrumentIdentifierGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewDeleteInstrumentIdentifierFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteInstrumentIdentifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteInstrumentIdentifierNoContent creates a DeleteInstrumentIdentifierNoContent with default headers values
func NewDeleteInstrumentIdentifierNoContent() *DeleteInstrumentIdentifierNoContent {
	return &DeleteInstrumentIdentifierNoContent{}
}

/*DeleteInstrumentIdentifierNoContent handles this case with default header values.

The server fulfilled the request but does not need to return a body
*/
type DeleteInstrumentIdentifierNoContent struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string
}

func (o *DeleteInstrumentIdentifierNoContent) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] deleteInstrumentIdentifierNoContent ", 204)
}

func (o *DeleteInstrumentIdentifierNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	return nil
}

// NewDeleteInstrumentIdentifierForbidden creates a DeleteInstrumentIdentifierForbidden with default headers values
func NewDeleteInstrumentIdentifierForbidden() *DeleteInstrumentIdentifierForbidden {
	return &DeleteInstrumentIdentifierForbidden{}
}

/*DeleteInstrumentIdentifierForbidden handles this case with default header values.

403ForbiddenResponse: e.g. The profile might not have permission to perform the operation.
*/
type DeleteInstrumentIdentifierForbidden struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierForbiddenBody
}

func (o *DeleteInstrumentIdentifierForbidden) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] deleteInstrumentIdentifierForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInstrumentIdentifierForbidden) GetPayload() *DeleteInstrumentIdentifierForbiddenBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(DeleteInstrumentIdentifierForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierNotFound creates a DeleteInstrumentIdentifierNotFound with default headers values
func NewDeleteInstrumentIdentifierNotFound() *DeleteInstrumentIdentifierNotFound {
	return &DeleteInstrumentIdentifierNotFound{}
}

/*DeleteInstrumentIdentifierNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type DeleteInstrumentIdentifierNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierNotFoundBody
}

func (o *DeleteInstrumentIdentifierNotFound) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] deleteInstrumentIdentifierNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInstrumentIdentifierNotFound) GetPayload() *DeleteInstrumentIdentifierNotFoundBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(DeleteInstrumentIdentifierNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierConflict creates a DeleteInstrumentIdentifierConflict with default headers values
func NewDeleteInstrumentIdentifierConflict() *DeleteInstrumentIdentifierConflict {
	return &DeleteInstrumentIdentifierConflict{}
}

/*DeleteInstrumentIdentifierConflict handles this case with default header values.

Conflict. The token is linked to a Payment Instrument.
*/
type DeleteInstrumentIdentifierConflict struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string
}

func (o *DeleteInstrumentIdentifierConflict) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] deleteInstrumentIdentifierConflict ", 409)
}

func (o *DeleteInstrumentIdentifierConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	return nil
}

// NewDeleteInstrumentIdentifierGone creates a DeleteInstrumentIdentifierGone with default headers values
func NewDeleteInstrumentIdentifierGone() *DeleteInstrumentIdentifierGone {
	return &DeleteInstrumentIdentifierGone{}
}

/*DeleteInstrumentIdentifierGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type DeleteInstrumentIdentifierGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierGoneBody
}

func (o *DeleteInstrumentIdentifierGone) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] deleteInstrumentIdentifierGone  %+v", 410, o.Payload)
}

func (o *DeleteInstrumentIdentifierGone) GetPayload() *DeleteInstrumentIdentifierGoneBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(DeleteInstrumentIdentifierGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierFailedDependency creates a DeleteInstrumentIdentifierFailedDependency with default headers values
func NewDeleteInstrumentIdentifierFailedDependency() *DeleteInstrumentIdentifierFailedDependency {
	return &DeleteInstrumentIdentifierFailedDependency{}
}

/*DeleteInstrumentIdentifierFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type DeleteInstrumentIdentifierFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierFailedDependencyBody
}

func (o *DeleteInstrumentIdentifierFailedDependency) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] deleteInstrumentIdentifierFailedDependency  %+v", 424, o.Payload)
}

func (o *DeleteInstrumentIdentifierFailedDependency) GetPayload() *DeleteInstrumentIdentifierFailedDependencyBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(DeleteInstrumentIdentifierFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstrumentIdentifierInternalServerError creates a DeleteInstrumentIdentifierInternalServerError with default headers values
func NewDeleteInstrumentIdentifierInternalServerError() *DeleteInstrumentIdentifierInternalServerError {
	return &DeleteInstrumentIdentifierInternalServerError{}
}

/*DeleteInstrumentIdentifierInternalServerError handles this case with default header values.

Unexpected error.
*/
type DeleteInstrumentIdentifierInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *DeleteInstrumentIdentifierInternalServerErrorBody
}

func (o *DeleteInstrumentIdentifierInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] deleteInstrumentIdentifierInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteInstrumentIdentifierInternalServerError) GetPayload() *DeleteInstrumentIdentifierInternalServerErrorBody {
	return o.Payload
}

func (o *DeleteInstrumentIdentifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(DeleteInstrumentIdentifierInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteInstrumentIdentifierFailedDependencyBody delete instrument identifier failed dependency body
swagger:model DeleteInstrumentIdentifierFailedDependencyBody
*/
type DeleteInstrumentIdentifierFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier failed dependency body
func (o *DeleteInstrumentIdentifierFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0 delete instrument identifier failed dependency body errors items0
swagger:model DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0
*/
type DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier failed dependency body errors items0
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0 delete instrument identifier failed dependency body errors items0 details items0
swagger:model DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0
*/
type DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier failed dependency body errors items0 details items0
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierForbiddenBody delete instrument identifier forbidden body
swagger:model DeleteInstrumentIdentifierForbiddenBody
*/
type DeleteInstrumentIdentifierForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier forbidden body
func (o *DeleteInstrumentIdentifierForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierForbiddenBodyErrorsItems0 delete instrument identifier forbidden body errors items0
swagger:model DeleteInstrumentIdentifierForbiddenBodyErrorsItems0
*/
type DeleteInstrumentIdentifierForbiddenBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier forbidden body errors items0
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0 delete instrument identifier forbidden body errors items0 details items0
swagger:model DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0
*/
type DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier forbidden body errors items0 details items0
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierGoneBody delete instrument identifier gone body
swagger:model DeleteInstrumentIdentifierGoneBody
*/
type DeleteInstrumentIdentifierGoneBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier gone body
func (o *DeleteInstrumentIdentifierGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierGoneBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierGoneBodyErrorsItems0 delete instrument identifier gone body errors items0
swagger:model DeleteInstrumentIdentifierGoneBodyErrorsItems0
*/
type DeleteInstrumentIdentifierGoneBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier gone body errors items0
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0 delete instrument identifier gone body errors items0 details items0
swagger:model DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0
*/
type DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier gone body errors items0 details items0
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierInternalServerErrorBody delete instrument identifier internal server error body
swagger:model DeleteInstrumentIdentifierInternalServerErrorBody
*/
type DeleteInstrumentIdentifierInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier internal server error body
func (o *DeleteInstrumentIdentifierInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0 delete instrument identifier internal server error body errors items0
swagger:model DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0
*/
type DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier internal server error body errors items0
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0 delete instrument identifier internal server error body errors items0 details items0
swagger:model DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0
*/
type DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier internal server error body errors items0 details items0
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierNotFoundBody delete instrument identifier not found body
swagger:model DeleteInstrumentIdentifierNotFoundBody
*/
type DeleteInstrumentIdentifierNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*DeleteInstrumentIdentifierNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this delete instrument identifier not found body
func (o *DeleteInstrumentIdentifierNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteInstrumentIdentifierNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierNotFoundBodyErrorsItems0 delete instrument identifier not found body errors items0
swagger:model DeleteInstrumentIdentifierNotFoundBodyErrorsItems0
*/
type DeleteInstrumentIdentifierNotFoundBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this delete instrument identifier not found body errors items0
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0 delete instrument identifier not found body errors items0 details items0
swagger:model DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0
*/
type DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this delete instrument identifier not found body errors items0 details items0
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
