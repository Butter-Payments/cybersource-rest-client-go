/**
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body2', 'model/Body3', 'model/InlineResponse2016', 'model/InlineResponse4006'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body2'), require('../model/Body3'), require('../model/InlineResponse2016'), require('../model/InlineResponse4006'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.PaymentInstrumentApi = factory(root.CyberSource.ApiClient, root.CyberSource.Body2, root.CyberSource.Body3, root.CyberSource.InlineResponse2016, root.CyberSource.InlineResponse4006);
  }
}(this, function(ApiClient, Body2, Body3, InlineResponse2016, InlineResponse4006) {
  'use strict';

  /**
   * PaymentInstrument service.
   * @module api/PaymentInstrumentApi
   * @version 0.0.1
   */

  /**
   * Constructs a new PaymentInstrumentApi. 
   * @alias module:api/PaymentInstrumentApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the paymentinstrumentsPost operation.
     * @callback module:api/PaymentInstrumentApi~paymentinstrumentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {module:model/Body2} body Please specify the customers payment details for card or bank account.
     * @param {module:api/PaymentInstrumentApi~paymentinstrumentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2016}
     */
    this.paymentinstrumentsPost = function(profileId, body, callback) {
      var postBody = body;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling paymentinstrumentsPost");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentinstrumentsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json']; 
      var returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentinstrumentsTokenIdDelete operation.
     * @callback module:api/PaymentInstrumentApi~paymentinstrumentsTokenIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} tokenId The TokenId of a Payment Instrument.
     * @param {module:api/PaymentInstrumentApi~paymentinstrumentsTokenIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.paymentinstrumentsTokenIdDelete = function(profileId, tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling paymentinstrumentsTokenIdDelete");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling paymentinstrumentsTokenIdDelete");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentinstrumentsTokenIdGet operation.
     * @callback module:api/PaymentInstrumentApi~paymentinstrumentsTokenIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} tokenId The TokenId of a Payment Instrument.
     * @param {module:api/PaymentInstrumentApi~paymentinstrumentsTokenIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2016}
     */
    this.paymentinstrumentsTokenIdGet = function(profileId, tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling paymentinstrumentsTokenIdGet");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling paymentinstrumentsTokenIdGet");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments/{tokenId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentinstrumentsTokenIdPatch operation.
     * @callback module:api/PaymentInstrumentApi~paymentinstrumentsTokenIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Payment Instrument
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} tokenId The TokenId of a Payment Instrument.
     * @param {module:model/Body3} body Please specify the customers payment details.
     * @param {module:api/PaymentInstrumentApi~paymentinstrumentsTokenIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2016}
     */
    this.paymentinstrumentsTokenIdPatch = function(profileId, tokenId, body, callback) {
      var postBody = body;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling paymentinstrumentsTokenIdPatch");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling paymentinstrumentsTokenIdPatch");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentinstrumentsTokenIdPatch");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/tms/v1/paymentinstruments/{tokenId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
