// Code generated by go-swagger; DO NOT EDIT.

package instrument_identifier

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetInstrumentIdentifierReader is a Reader for the GetInstrumentIdentifier structure.
type GetInstrumentIdentifierReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstrumentIdentifierReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInstrumentIdentifierOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInstrumentIdentifierBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInstrumentIdentifierForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInstrumentIdentifierNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetInstrumentIdentifierGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewGetInstrumentIdentifierFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInstrumentIdentifierInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInstrumentIdentifierOK creates a GetInstrumentIdentifierOK with default headers values
func NewGetInstrumentIdentifierOK() *GetInstrumentIdentifierOK {
	return &GetInstrumentIdentifierOK{}
}

/*GetInstrumentIdentifierOK handles this case with default header values.

Returns an existing Instrument Identifier associated with the supplied token id.
*/
type GetInstrumentIdentifierOK struct {
	/*An ETag is an identifier assigned to a specific version of a resource.
	 */
	ETag string
	/*A globally-unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierOKBody
}

func (o *GetInstrumentIdentifierOK) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] getInstrumentIdentifierOK  %+v", 200, o.Payload)
}

func (o *GetInstrumentIdentifierOK) GetPayload() *GetInstrumentIdentifierOKBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetInstrumentIdentifierOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierBadRequest creates a GetInstrumentIdentifierBadRequest with default headers values
func NewGetInstrumentIdentifierBadRequest() *GetInstrumentIdentifierBadRequest {
	return &GetInstrumentIdentifierBadRequest{}
}

/*GetInstrumentIdentifierBadRequest handles this case with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type GetInstrumentIdentifierBadRequest struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierBadRequestBody
}

func (o *GetInstrumentIdentifierBadRequest) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] getInstrumentIdentifierBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstrumentIdentifierBadRequest) GetPayload() *GetInstrumentIdentifierBadRequestBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetInstrumentIdentifierBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierForbidden creates a GetInstrumentIdentifierForbidden with default headers values
func NewGetInstrumentIdentifierForbidden() *GetInstrumentIdentifierForbidden {
	return &GetInstrumentIdentifierForbidden{}
}

/*GetInstrumentIdentifierForbidden handles this case with default header values.

403ForbiddenResponse: e.g. The profile might not have permission to perform the operation.
*/
type GetInstrumentIdentifierForbidden struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierForbiddenBody
}

func (o *GetInstrumentIdentifierForbidden) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] getInstrumentIdentifierForbidden  %+v", 403, o.Payload)
}

func (o *GetInstrumentIdentifierForbidden) GetPayload() *GetInstrumentIdentifierForbiddenBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetInstrumentIdentifierForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierNotFound creates a GetInstrumentIdentifierNotFound with default headers values
func NewGetInstrumentIdentifierNotFound() *GetInstrumentIdentifierNotFound {
	return &GetInstrumentIdentifierNotFound{}
}

/*GetInstrumentIdentifierNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type GetInstrumentIdentifierNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierNotFoundBody
}

func (o *GetInstrumentIdentifierNotFound) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] getInstrumentIdentifierNotFound  %+v", 404, o.Payload)
}

func (o *GetInstrumentIdentifierNotFound) GetPayload() *GetInstrumentIdentifierNotFoundBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetInstrumentIdentifierNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierGone creates a GetInstrumentIdentifierGone with default headers values
func NewGetInstrumentIdentifierGone() *GetInstrumentIdentifierGone {
	return &GetInstrumentIdentifierGone{}
}

/*GetInstrumentIdentifierGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type GetInstrumentIdentifierGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierGoneBody
}

func (o *GetInstrumentIdentifierGone) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] getInstrumentIdentifierGone  %+v", 410, o.Payload)
}

func (o *GetInstrumentIdentifierGone) GetPayload() *GetInstrumentIdentifierGoneBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetInstrumentIdentifierGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierFailedDependency creates a GetInstrumentIdentifierFailedDependency with default headers values
func NewGetInstrumentIdentifierFailedDependency() *GetInstrumentIdentifierFailedDependency {
	return &GetInstrumentIdentifierFailedDependency{}
}

/*GetInstrumentIdentifierFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type GetInstrumentIdentifierFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierFailedDependencyBody
}

func (o *GetInstrumentIdentifierFailedDependency) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] getInstrumentIdentifierFailedDependency  %+v", 424, o.Payload)
}

func (o *GetInstrumentIdentifierFailedDependency) GetPayload() *GetInstrumentIdentifierFailedDependencyBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetInstrumentIdentifierFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstrumentIdentifierInternalServerError creates a GetInstrumentIdentifierInternalServerError with default headers values
func NewGetInstrumentIdentifierInternalServerError() *GetInstrumentIdentifierInternalServerError {
	return &GetInstrumentIdentifierInternalServerError{}
}

/*GetInstrumentIdentifierInternalServerError handles this case with default header values.

Unexpected error.
*/
type GetInstrumentIdentifierInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetInstrumentIdentifierInternalServerErrorBody
}

func (o *GetInstrumentIdentifierInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tms/v1/instrumentidentifiers/{instrumentIdentifierTokenId}][%d] getInstrumentIdentifierInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInstrumentIdentifierInternalServerError) GetPayload() *GetInstrumentIdentifierInternalServerErrorBody {
	return o.Payload
}

func (o *GetInstrumentIdentifierInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetInstrumentIdentifierInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetInstrumentIdentifierBadRequestBody get instrument identifier bad request body
swagger:model GetInstrumentIdentifierBadRequestBody
*/
type GetInstrumentIdentifierBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier bad request body
func (o *GetInstrumentIdentifierBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierBadRequestBodyErrorsItems0 get instrument identifier bad request body errors items0
swagger:model GetInstrumentIdentifierBadRequestBodyErrorsItems0
*/
type GetInstrumentIdentifierBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier bad request body errors items0
func (o *GetInstrumentIdentifierBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0 get instrument identifier bad request body errors items0 details items0
swagger:model GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0
*/
type GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier bad request body errors items0 details items0
func (o *GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierFailedDependencyBody get instrument identifier failed dependency body
swagger:model GetInstrumentIdentifierFailedDependencyBody
*/
type GetInstrumentIdentifierFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier failed dependency body
func (o *GetInstrumentIdentifierFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierFailedDependencyBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierFailedDependencyBodyErrorsItems0 get instrument identifier failed dependency body errors items0
swagger:model GetInstrumentIdentifierFailedDependencyBodyErrorsItems0
*/
type GetInstrumentIdentifierFailedDependencyBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier failed dependency body errors items0
func (o *GetInstrumentIdentifierFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierFailedDependencyBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0 get instrument identifier failed dependency body errors items0 details items0
swagger:model GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0
*/
type GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier failed dependency body errors items0 details items0
func (o *GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierFailedDependencyBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierForbiddenBody get instrument identifier forbidden body
swagger:model GetInstrumentIdentifierForbiddenBody
*/
type GetInstrumentIdentifierForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier forbidden body
func (o *GetInstrumentIdentifierForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierForbiddenBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierForbiddenBodyErrorsItems0 get instrument identifier forbidden body errors items0
swagger:model GetInstrumentIdentifierForbiddenBodyErrorsItems0
*/
type GetInstrumentIdentifierForbiddenBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier forbidden body errors items0
func (o *GetInstrumentIdentifierForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierForbiddenBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0 get instrument identifier forbidden body errors items0 details items0
swagger:model GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0
*/
type GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier forbidden body errors items0 details items0
func (o *GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierForbiddenBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierGoneBody get instrument identifier gone body
swagger:model GetInstrumentIdentifierGoneBody
*/
type GetInstrumentIdentifierGoneBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier gone body
func (o *GetInstrumentIdentifierGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierGoneBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierGoneBodyErrorsItems0 get instrument identifier gone body errors items0
swagger:model GetInstrumentIdentifierGoneBodyErrorsItems0
*/
type GetInstrumentIdentifierGoneBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier gone body errors items0
func (o *GetInstrumentIdentifierGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierGoneBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0 get instrument identifier gone body errors items0 details items0
swagger:model GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0
*/
type GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier gone body errors items0 details items0
func (o *GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierGoneBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierInternalServerErrorBody get instrument identifier internal server error body
swagger:model GetInstrumentIdentifierInternalServerErrorBody
*/
type GetInstrumentIdentifierInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier internal server error body
func (o *GetInstrumentIdentifierInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0 get instrument identifier internal server error body errors items0
swagger:model GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0
*/
type GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier internal server error body errors items0
func (o *GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0 get instrument identifier internal server error body errors items0 details items0
swagger:model GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0
*/
type GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier internal server error body errors items0 details items0
func (o *GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierInternalServerErrorBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierNotFoundBody get instrument identifier not found body
swagger:model GetInstrumentIdentifierNotFoundBody
*/
type GetInstrumentIdentifierNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*GetInstrumentIdentifierNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get instrument identifier not found body
func (o *GetInstrumentIdentifierNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierNotFoundBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInstrumentIdentifierNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierNotFoundBodyErrorsItems0 get instrument identifier not found body errors items0
swagger:model GetInstrumentIdentifierNotFoundBodyErrorsItems0
*/
type GetInstrumentIdentifierNotFoundBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier not found body errors items0
func (o *GetInstrumentIdentifierNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierNotFoundBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0 get instrument identifier not found body errors items0 details items0
swagger:model GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0
*/
type GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get instrument identifier not found body errors items0 details items0
func (o *GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierNotFoundBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBody get instrument identifier o k body
swagger:model GetInstrumentIdentifierOKBody
*/
type GetInstrumentIdentifierOKBody struct {

	// links
	Links *GetInstrumentIdentifierOKBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetInstrumentIdentifierOKBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetInstrumentIdentifierOKBodyBillTo `json:"billTo,omitempty"`

	// card
	Card *GetInstrumentIdentifierOKBodyCard `json:"card,omitempty"`

	// The id of the Instrument Identifier Token.
	//
	ID string `json:"id,omitempty"`

	// issuer
	Issuer *GetInstrumentIdentifierOKBodyIssuer `json:"issuer,omitempty"`

	// metadata
	Metadata *GetInstrumentIdentifierOKBodyMetadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetInstrumentIdentifierOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// tokenized card
	TokenizedCard *GetInstrumentIdentifierOKBodyTokenizedCard `json:"tokenizedCard,omitempty"`

	// The type of Instrument Identifier.
	// Valid values:
	// - enrollable card
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier o k body
func (o *GetInstrumentIdentifierOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateIssuer(formats strfmt.Registry) error {

	if swag.IsZero(o.Issuer) { // not required
		return nil
	}

	if o.Issuer != nil {
		if err := o.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBody) validateTokenizedCard(formats strfmt.Registry) error {

	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBody) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyBankAccount get instrument identifier o k body bank account
swagger:model GetInstrumentIdentifierOKBodyBankAccount
*/
type GetInstrumentIdentifierOKBodyBankAccount struct {

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this get instrument identifier o k body bank account
func (o *GetInstrumentIdentifierOKBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 17); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyBillTo This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
swagger:model GetInstrumentIdentifierOKBodyBillTo
*/
type GetInstrumentIdentifierOKBodyBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get instrument identifier o k body bill to
func (o *GetInstrumentIdentifierOKBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyBillTo) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyCard The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
swagger:model GetInstrumentIdentifierOKBodyCard
*/
type GetInstrumentIdentifierOKBodyCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card Verification Number.
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this get instrument identifier o k body card
func (o *GetInstrumentIdentifierOKBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("getInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyCard) validateSecurityCode(formats strfmt.Registry) error {

	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"card"+"."+"securityCode", "body", string(o.SecurityCode), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyCard) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyIssuer get instrument identifier o k body issuer
swagger:model GetInstrumentIdentifierOKBodyIssuer
*/
type GetInstrumentIdentifierOKBodyIssuer struct {

	// This reference number serves as a link to the cardholder account and to all transactions for that account.
	//
	// Read Only: true
	// Max Length: 32
	PaymentAccountReference string `json:"paymentAccountReference,omitempty"`
}

// Validate validates this get instrument identifier o k body issuer
func (o *GetInstrumentIdentifierOKBodyIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyIssuer) validatePaymentAccountReference(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentAccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"issuer"+"."+"paymentAccountReference", "body", string(o.PaymentAccountReference), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyIssuer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyIssuer) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyLinks get instrument identifier o k body links
swagger:model GetInstrumentIdentifierOKBodyLinks
*/
type GetInstrumentIdentifierOKBodyLinks struct {

	// payment instruments
	PaymentInstruments *GetInstrumentIdentifierOKBodyLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *GetInstrumentIdentifierOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get instrument identifier o k body links
func (o *GetInstrumentIdentifierOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyLinks) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyLinksPaymentInstruments get instrument identifier o k body links payment instruments
swagger:model GetInstrumentIdentifierOKBodyLinksPaymentInstruments
*/
type GetInstrumentIdentifierOKBodyLinksPaymentInstruments struct {

	// Link to the Instrument Identifiers Payment Instruments.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier o k body links payment instruments
func (o *GetInstrumentIdentifierOKBodyLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyLinksSelf get instrument identifier o k body links self
swagger:model GetInstrumentIdentifierOKBodyLinksSelf
*/
type GetInstrumentIdentifierOKBodyLinksSelf struct {

	// Link to the Instrument Identifier.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get instrument identifier o k body links self
func (o *GetInstrumentIdentifierOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyMetadata get instrument identifier o k body metadata
swagger:model GetInstrumentIdentifierOKBodyMetadata
*/
type GetInstrumentIdentifierOKBodyMetadata struct {

	// The creator of the Instrument Identifier token.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get instrument identifier o k body metadata
func (o *GetInstrumentIdentifierOKBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyMetadata) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformation get instrument identifier o k body processing information
swagger:model GetInstrumentIdentifierOKBodyProcessingInformation
*/
type GetInstrumentIdentifierOKBodyProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information
func (o *GetInstrumentIdentifierOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions get instrument identifier o k body processing information authorization options
swagger:model GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
*/
type GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information authorization options
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator get instrument identifier o k body processing information authorization options initiator
swagger:model GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
*/
type GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information authorization options initiator
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction get instrument identifier o k body processing information authorization options initiator merchant initiated transaction
swagger:model GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_
	// in the reply message for either the original merchant-initiated payment in the series or the previous
	// merchant-initiated payment in the series.
	//
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this get instrument identifier o k body processing information authorization options initiator merchant initiated transaction
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyTokenizedCard get instrument identifier o k body tokenized card
swagger:model GetInstrumentIdentifierOKBodyTokenizedCard
*/
type GetInstrumentIdentifierOKBodyTokenizedCard struct {

	// card
	Card *GetInstrumentIdentifierOKBodyTokenizedCardCard `json:"card,omitempty"`

	// Generated value used in conjunction with the network token for making a payment.
	//
	// Read Only: true
	Cryptogram string `json:"cryptogram,omitempty"`

	// Two-digit month in which the network token expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the network token expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The token requestors customer’s payment network token
	//
	// Read Only: true
	Number string `json:"number,omitempty"`

	// Issuers state for the network token
	// Valid values:
	// - ACTIVE
	// - SUSPENDED : This state can change to ACTIVE or DELETED.
	// - DELETED : This is a final state for the network token.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// The network token card association brand
	// Valid values:
	// - visa
	// - mastercard
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get instrument identifier o k body tokenized card
func (o *GetInstrumentIdentifierOKBodyTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyTokenizedCard) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInstrumentIdentifierOK" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyTokenizedCard) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInstrumentIdentifierOKBodyTokenizedCardCard The latest card details associated with the network token
swagger:model GetInstrumentIdentifierOKBodyTokenizedCardCard
*/
type GetInstrumentIdentifierOKBodyTokenizedCardCard struct {

	//
	// Two-digit month in which the customer’s latest payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the customer’s latest payment card expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s latest payment card number suffix
	//
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this get instrument identifier o k body tokenized card card
func (o *GetInstrumentIdentifierOKBodyTokenizedCardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInstrumentIdentifierOKBodyTokenizedCardCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetInstrumentIdentifierOKBodyTokenizedCardCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getInstrumentIdentifierOK"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyTokenizedCardCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInstrumentIdentifierOKBodyTokenizedCardCard) UnmarshalBinary(b []byte) error {
	var res GetInstrumentIdentifierOKBodyTokenizedCardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
