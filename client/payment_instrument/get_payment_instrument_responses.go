// Code generated by go-swagger; DO NOT EDIT.

package payment_instrument

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetPaymentInstrumentReader is a Reader for the GetPaymentInstrument structure.
type GetPaymentInstrumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentInstrumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentInstrumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentInstrumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaymentInstrumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPaymentInstrumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetPaymentInstrumentGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewGetPaymentInstrumentFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPaymentInstrumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPaymentInstrumentOK creates a GetPaymentInstrumentOK with default headers values
func NewGetPaymentInstrumentOK() *GetPaymentInstrumentOK {
	return &GetPaymentInstrumentOK{}
}

/*GetPaymentInstrumentOK handles this case with default header values.

Returns an existing Payment Instrument associated with the supplied token id.
*/
type GetPaymentInstrumentOK struct {
	/*An ETag is an identifier assigned to a specific version of a resource.
	 */
	ETag string
	/*A globally-unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetPaymentInstrumentOKBody
}

func (o *GetPaymentInstrumentOK) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{paymentInstrumentTokenId}][%d] getPaymentInstrumentOK  %+v", 200, o.Payload)
}

func (o *GetPaymentInstrumentOK) GetPayload() *GetPaymentInstrumentOKBody {
	return o.Payload
}

func (o *GetPaymentInstrumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header ETag
	o.ETag = response.GetHeader("ETag")

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetPaymentInstrumentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentBadRequest creates a GetPaymentInstrumentBadRequest with default headers values
func NewGetPaymentInstrumentBadRequest() *GetPaymentInstrumentBadRequest {
	return &GetPaymentInstrumentBadRequest{}
}

/*GetPaymentInstrumentBadRequest handles this case with default header values.

Bad Request: e.g. A required header value could be missing.
*/
type GetPaymentInstrumentBadRequest struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetPaymentInstrumentBadRequestBody
}

func (o *GetPaymentInstrumentBadRequest) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{paymentInstrumentTokenId}][%d] getPaymentInstrumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetPaymentInstrumentBadRequest) GetPayload() *GetPaymentInstrumentBadRequestBody {
	return o.Payload
}

func (o *GetPaymentInstrumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetPaymentInstrumentBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentForbidden creates a GetPaymentInstrumentForbidden with default headers values
func NewGetPaymentInstrumentForbidden() *GetPaymentInstrumentForbidden {
	return &GetPaymentInstrumentForbidden{}
}

/*GetPaymentInstrumentForbidden handles this case with default header values.

403ForbiddenResponse: e.g. The profile might not have permission to perform the operation.
*/
type GetPaymentInstrumentForbidden struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetPaymentInstrumentForbiddenBody
}

func (o *GetPaymentInstrumentForbidden) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{paymentInstrumentTokenId}][%d] getPaymentInstrumentForbidden  %+v", 403, o.Payload)
}

func (o *GetPaymentInstrumentForbidden) GetPayload() *GetPaymentInstrumentForbiddenBody {
	return o.Payload
}

func (o *GetPaymentInstrumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetPaymentInstrumentForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentNotFound creates a GetPaymentInstrumentNotFound with default headers values
func NewGetPaymentInstrumentNotFound() *GetPaymentInstrumentNotFound {
	return &GetPaymentInstrumentNotFound{}
}

/*GetPaymentInstrumentNotFound handles this case with default header values.

Token Not Found. The `tokenid` may not exist or was entered incorrectly.
*/
type GetPaymentInstrumentNotFound struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetPaymentInstrumentNotFoundBody
}

func (o *GetPaymentInstrumentNotFound) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{paymentInstrumentTokenId}][%d] getPaymentInstrumentNotFound  %+v", 404, o.Payload)
}

func (o *GetPaymentInstrumentNotFound) GetPayload() *GetPaymentInstrumentNotFoundBody {
	return o.Payload
}

func (o *GetPaymentInstrumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetPaymentInstrumentNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentGone creates a GetPaymentInstrumentGone with default headers values
func NewGetPaymentInstrumentGone() *GetPaymentInstrumentGone {
	return &GetPaymentInstrumentGone{}
}

/*GetPaymentInstrumentGone handles this case with default header values.

Token Not Available. The token has been deleted.
*/
type GetPaymentInstrumentGone struct {
	/*A globally unique ID associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetPaymentInstrumentGoneBody
}

func (o *GetPaymentInstrumentGone) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{paymentInstrumentTokenId}][%d] getPaymentInstrumentGone  %+v", 410, o.Payload)
}

func (o *GetPaymentInstrumentGone) GetPayload() *GetPaymentInstrumentGoneBody {
	return o.Payload
}

func (o *GetPaymentInstrumentGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetPaymentInstrumentGoneBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentFailedDependency creates a GetPaymentInstrumentFailedDependency with default headers values
func NewGetPaymentInstrumentFailedDependency() *GetPaymentInstrumentFailedDependency {
	return &GetPaymentInstrumentFailedDependency{}
}

/*GetPaymentInstrumentFailedDependency handles this case with default header values.

Failed Dependency: e.g. The profile represented by the profile-id may not exist or the profile-id was entered incorrectly.
*/
type GetPaymentInstrumentFailedDependency struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetPaymentInstrumentFailedDependencyBody
}

func (o *GetPaymentInstrumentFailedDependency) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{paymentInstrumentTokenId}][%d] getPaymentInstrumentFailedDependency  %+v", 424, o.Payload)
}

func (o *GetPaymentInstrumentFailedDependency) GetPayload() *GetPaymentInstrumentFailedDependencyBody {
	return o.Payload
}

func (o *GetPaymentInstrumentFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetPaymentInstrumentFailedDependencyBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentInstrumentInternalServerError creates a GetPaymentInstrumentInternalServerError with default headers values
func NewGetPaymentInstrumentInternalServerError() *GetPaymentInstrumentInternalServerError {
	return &GetPaymentInstrumentInternalServerError{}
}

/*GetPaymentInstrumentInternalServerError handles this case with default header values.

Unexpected error.
*/
type GetPaymentInstrumentInternalServerError struct {
	/*A globally unique id associated with your request.
	 */
	UniqueTransactionID string
	/*The mandatory correlation id passed by upstream (calling) system.
	 */
	VcCorrelationID string

	Payload *GetPaymentInstrumentInternalServerErrorBody
}

func (o *GetPaymentInstrumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tms/v1/paymentinstruments/{paymentInstrumentTokenId}][%d] getPaymentInstrumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPaymentInstrumentInternalServerError) GetPayload() *GetPaymentInstrumentInternalServerErrorBody {
	return o.Payload
}

func (o *GetPaymentInstrumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header uniqueTransactionID
	o.UniqueTransactionID = response.GetHeader("uniqueTransactionID")

	// response header v-c-correlation-id
	o.VcCorrelationID = response.GetHeader("v-c-correlation-id")

	o.Payload = new(GetPaymentInstrumentInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPaymentInstrumentBadRequestBody get payment instrument bad request body
swagger:model GetPaymentInstrumentBadRequestBody
*/
type GetPaymentInstrumentBadRequestBody struct {

	// errors
	// Read Only: true
	Errors []*GetPaymentInstrumentBadRequestBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get payment instrument bad request body
func (o *GetPaymentInstrumentBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentBadRequest" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentBadRequestBodyErrorsItems0 get payment instrument bad request body errors items0
swagger:model GetPaymentInstrumentBadRequestBodyErrorsItems0
*/
type GetPaymentInstrumentBadRequestBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument bad request body errors items0
func (o *GetPaymentInstrumentBadRequestBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentBadRequestBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentBadRequestBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0 get payment instrument bad request body errors items0 details items0
swagger:model GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0
*/
type GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument bad request body errors items0 details items0
func (o *GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentBadRequestBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentFailedDependencyBody get payment instrument failed dependency body
swagger:model GetPaymentInstrumentFailedDependencyBody
*/
type GetPaymentInstrumentFailedDependencyBody struct {

	// errors
	// Read Only: true
	Errors []*GetPaymentInstrumentFailedDependencyBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get payment instrument failed dependency body
func (o *GetPaymentInstrumentFailedDependencyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentFailedDependencyBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentFailedDependency" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentFailedDependencyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentFailedDependencyBodyErrorsItems0 get payment instrument failed dependency body errors items0
swagger:model GetPaymentInstrumentFailedDependencyBodyErrorsItems0
*/
type GetPaymentInstrumentFailedDependencyBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument failed dependency body errors items0
func (o *GetPaymentInstrumentFailedDependencyBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentFailedDependencyBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentFailedDependencyBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0 get payment instrument failed dependency body errors items0 details items0
swagger:model GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0
*/
type GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument failed dependency body errors items0 details items0
func (o *GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentFailedDependencyBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentForbiddenBody get payment instrument forbidden body
swagger:model GetPaymentInstrumentForbiddenBody
*/
type GetPaymentInstrumentForbiddenBody struct {

	// errors
	// Read Only: true
	Errors []*GetPaymentInstrumentForbiddenBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get payment instrument forbidden body
func (o *GetPaymentInstrumentForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentForbiddenBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentForbidden" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentForbiddenBodyErrorsItems0 get payment instrument forbidden body errors items0
swagger:model GetPaymentInstrumentForbiddenBodyErrorsItems0
*/
type GetPaymentInstrumentForbiddenBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument forbidden body errors items0
func (o *GetPaymentInstrumentForbiddenBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentForbiddenBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentForbiddenBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0 get payment instrument forbidden body errors items0 details items0
swagger:model GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0
*/
type GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument forbidden body errors items0 details items0
func (o *GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentForbiddenBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentGoneBody get payment instrument gone body
swagger:model GetPaymentInstrumentGoneBody
*/
type GetPaymentInstrumentGoneBody struct {

	// errors
	// Read Only: true
	Errors []*GetPaymentInstrumentGoneBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get payment instrument gone body
func (o *GetPaymentInstrumentGoneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentGoneBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentGone" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentGoneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentGoneBodyErrorsItems0 get payment instrument gone body errors items0
swagger:model GetPaymentInstrumentGoneBodyErrorsItems0
*/
type GetPaymentInstrumentGoneBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument gone body errors items0
func (o *GetPaymentInstrumentGoneBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentGoneBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentGoneBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0 get payment instrument gone body errors items0 details items0
swagger:model GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0
*/
type GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument gone body errors items0 details items0
func (o *GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentGoneBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentInternalServerErrorBody get payment instrument internal server error body
swagger:model GetPaymentInstrumentInternalServerErrorBody
*/
type GetPaymentInstrumentInternalServerErrorBody struct {

	// errors
	// Read Only: true
	Errors []*GetPaymentInstrumentInternalServerErrorBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get payment instrument internal server error body
func (o *GetPaymentInstrumentInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentInternalServerErrorBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentInternalServerError" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentInternalServerErrorBodyErrorsItems0 get payment instrument internal server error body errors items0
swagger:model GetPaymentInstrumentInternalServerErrorBodyErrorsItems0
*/
type GetPaymentInstrumentInternalServerErrorBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument internal server error body errors items0
func (o *GetPaymentInstrumentInternalServerErrorBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentInternalServerErrorBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentInternalServerErrorBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0 get payment instrument internal server error body errors items0 details items0
swagger:model GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0
*/
type GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument internal server error body errors items0 details items0
func (o *GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentInternalServerErrorBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentNotFoundBody get payment instrument not found body
swagger:model GetPaymentInstrumentNotFoundBody
*/
type GetPaymentInstrumentNotFoundBody struct {

	// errors
	// Read Only: true
	Errors []*GetPaymentInstrumentNotFoundBodyErrorsItems0 `json:"errors"`
}

// Validate validates this get payment instrument not found body
func (o *GetPaymentInstrumentNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentNotFoundBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentNotFound" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentNotFoundBodyErrorsItems0 get payment instrument not found body errors items0
swagger:model GetPaymentInstrumentNotFoundBodyErrorsItems0
*/
type GetPaymentInstrumentNotFoundBodyErrorsItems0 struct {

	// details
	// Read Only: true
	Details []*GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0 `json:"details"`

	// The detailed message related to the type stated above.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The type of error.
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument not found body errors items0
func (o *GetPaymentInstrumentNotFoundBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentNotFoundBodyErrorsItems0) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentNotFoundBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0 get payment instrument not found body errors items0 details items0
swagger:model GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0
*/
type GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0 struct {

	// The location of the field that caused the error.
	// Read Only: true
	Location string `json:"location,omitempty"`

	// The name of the field that caused the error.
	// Read Only: true
	Name string `json:"name,omitempty"`
}

// Validate validates this get payment instrument not found body errors items0 details items0
func (o *GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentNotFoundBodyErrorsItems0DetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBody get payment instrument o k body
swagger:model GetPaymentInstrumentOKBody
*/
type GetPaymentInstrumentOKBody struct {

	// embedded
	Embedded *GetPaymentInstrumentOKBodyEmbedded `json:"_embedded,omitempty"`

	// links
	Links *GetPaymentInstrumentOKBodyLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetPaymentInstrumentOKBodyBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetPaymentInstrumentOKBodyBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *GetPaymentInstrumentOKBodyBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *GetPaymentInstrumentOKBodyCard `json:"card,omitempty"`

	// The id of the Payment Instrument Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *GetPaymentInstrumentOKBodyInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *GetPaymentInstrumentOKBodyMerchantInformation `json:"merchantInformation,omitempty"`

	// metadata
	Metadata *GetPaymentInstrumentOKBodyMetadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetPaymentInstrumentOKBodyProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this get payment instrument o k body
func (o *GetPaymentInstrumentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBody) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(o.Embedded) { // not required
		return nil
	}

	if o.Embedded != nil {
		if err := o.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.BuyerInformation) { // not required
		return nil
	}

	if o.BuyerInformation != nil {
		if err := o.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"id", "body", string(o.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInformation) { // not required
		return nil
	}

	if o.MerchantInformation != nil {
		if err := o.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBody) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBody) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBankAccount get payment instrument o k body bank account
swagger:model GetPaymentInstrumentOKBodyBankAccount
*/
type GetPaymentInstrumentOKBodyBankAccount struct {

	// Account type.
	//
	// Valid values:
	//  - checking : C
	//  - general ledger : G This value is supported only on Wells Fargo ACH
	//  - savings : S (U.S. dollars only)
	//  - corporate checking : X (U.S. dollars only)
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument o k body bank account
func (o *GetPaymentInstrumentOKBodyBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBankAccount) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"bankAccount"+"."+"type", "body", string(o.Type), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBankAccount) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBillTo get payment instrument o k body bill to
swagger:model GetPaymentInstrumentOKBodyBillTo
*/
type GetPaymentInstrumentOKBodyBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer’s first name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer’s phone number.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get payment instrument o k body bill to
func (o *GetPaymentInstrumentOKBodyBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(o.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"company", "body", string(o.Company), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"email", "body", string(o.Email), 255); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"firstName", "body", string(o.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"lastName", "body", string(o.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"phoneNumber", "body", string(o.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBillTo) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBuyerInformation get payment instrument o k body buyer information
swagger:model GetPaymentInstrumentOKBodyBuyerInformation
*/
type GetPaymentInstrumentOKBodyBuyerInformation struct {

	// Company’s tax identifier. This is only used for eCheck service.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer. Format: YYYY-MM-DD
	//
	// Format: date
	DateOfBirth strfmt.Date `json:"dateOfBirth,omitempty"`

	// personal identification
	PersonalIdentification []*GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this get payment instrument o k body buyer information
func (o *GetPaymentInstrumentOKBodyBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(o.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"companyTaxID", "body", string(o.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validateDateOfBirth(formats strfmt.Registry) error {

	if swag.IsZero(o.DateOfBirth) { // not required
		return nil
	}

	if err := validate.FormatOf("getPaymentInstrumentOK"+"."+"buyerInformation"+"."+"dateOfBirth", "body", "date", o.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(o.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(o.PersonalIdentification); i++ {
		if swag.IsZero(o.PersonalIdentification[i]) { // not required
			continue
		}

		if o.PersonalIdentification[i] != nil {
			if err := o.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPaymentInstrumentOK" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 get payment instrument o k body buyer information personal identification items0
swagger:model GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0
*/
type GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0 struct {

	// The value of the identification type.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// The type of the identification.
	//
	// Valid values:
	//   - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument o k body buyer information personal identification items0
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(o.ID), 26); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.IssuedBy) { // not required
		return nil
	}

	if o.IssuedBy != nil {
		if err := o.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy get payment instrument o k body buyer information personal identification items0 issued by
swagger:model GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy
*/
type GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// The State or province where the customer’s driver’s license was issued.
	//
	// Use the two-character State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this get payment instrument o k body buyer information personal identification items0 issued by
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("issuedBy"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyCard get payment instrument o k body card
swagger:model GetPaymentInstrumentOKBodyCard
*/
type GetPaymentInstrumentOKBodyCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.
	//
	// **Note** The issue number is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`.
	// Valid values: 01 through 12.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 4
	StartYear string `json:"startYear,omitempty"`

	// tokenized information
	TokenizedInformation *GetPaymentInstrumentOKBodyCardTokenizedInformation `json:"tokenizedInformation,omitempty"`

	// Value that indicates the card type. Valid v2 : v1 - description values:
	//   * 001 : visa
	//   * 002 : mastercard - Eurocard—European regional brand of Mastercard
	//   * 003 : american express
	//   * 004 : discover
	//   * 005 : diners club
	//   * 006 : carte blanche
	//   * 007 : jcb
	//   * 008 : optima
	//   * 011 : twinpay credit
	//   * 012 : twinpay debit
	//   * 013 : walmart
	//   * 014 : enRoute
	//   * 015 : lowes consumer
	//   * 016 : home depot consumer
	//   * 017 : mbna
	//   * 018 : dicks sportswear
	//   * 019 : casual corner
	//   * 020 : sears
	//   * 021 : jal
	//   * 023 : disney
	//   * 024 : maestro uk domestic
	//   * 025 : sams club consumer
	//   * 026 : sams club business
	//   * 028 : bill me later
	//   * 029 : bebe
	//   * 030 : restoration hardware
	//   * 031 : delta online — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * 032 : solo
	//   * 033 : visa electron
	//   * 034 : dankort
	//   * 035 : laser
	//   * 036 : carte bleue — formerly Cartes Bancaires
	//   * 037 : carta si
	//   * 038 : pinless debit
	//   * 039 : encoded account
	//   * 040 : uatp
	//   * 041 : household
	//   * 042 : maestro international
	//   * 043 : ge money uk
	//   * 044 : korean cards
	//   * 045 : style
	//   * 046 : jcrew
	//   * 047 : payease china processing ewallet
	//   * 048 : payease china processing bank transfer
	//   * 049 : meijer private label
	//   * 050 : hipercard — supported only by the Comercio Latino processor.
	//   * 051 : aura — supported only by the Comercio Latino processor.
	//   * 052 : redecard
	//   * 054 : elo — supported only by the Comercio Latino processor.
	//   * 055 : capital one private label
	//   * 056 : synchrony private label
	//   * 057 : costco private label
	//   * 060 : mada
	//   * 062 : china union pay
	//   * 063 : falabella private label
	//
	Type string `json:"type,omitempty"`

	// 'Payment Instrument was created / updated as part of a pinless debit transaction.'
	//
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this get payment instrument o k body card
func (o *GetPaymentInstrumentOKBodyCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.IssueNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"issueNumber", "body", string(o.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.StartMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"startMonth", "body", string(o.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(o.StartYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"startYear", "body", string(o.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCard) validateTokenizedInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.TokenizedInformation) { // not required
		return nil
	}

	if o.TokenizedInformation != nil {
		if err := o.TokenizedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "card" + "." + "tokenizedInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyCard) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyCardTokenizedInformation get payment instrument o k body card tokenized information
swagger:model GetPaymentInstrumentOKBodyCardTokenizedInformation
*/
type GetPaymentInstrumentOKBodyCardTokenizedInformation struct {

	// Value that identifies your business and indicates that the cardholder’s account number is tokenized. This value
	// is assigned by the token service provider and is unique within the token service provider’s database.
	//
	// **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.
	//
	// Max Length: 11
	RequestorID string `json:"requestorID,omitempty"`

	// Type of transaction that provided the token data. This value does not specify the token service provider; it
	// specifies the entity that provided you with information about the token.
	//
	// Set the value for this field to 1. An application on the customer’s mobile device provided the token data.
	//
	// Max Length: 1
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this get payment instrument o k body card tokenized information
func (o *GetPaymentInstrumentOKBodyCardTokenizedInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyCardTokenizedInformation) validateRequestorID(formats strfmt.Registry) error {

	if swag.IsZero(o.RequestorID) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"tokenizedInformation"+"."+"requestorID", "body", string(o.RequestorID), 11); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyCardTokenizedInformation) validateTransactionType(formats strfmt.Registry) error {

	if swag.IsZero(o.TransactionType) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"card"+"."+"tokenizedInformation"+"."+"transactionType", "body", string(o.TransactionType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyCardTokenizedInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyCardTokenizedInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyCardTokenizedInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbedded Additional resources for the Payment Instrument token.
//
swagger:model GetPaymentInstrumentOKBodyEmbedded
*/
type GetPaymentInstrumentOKBodyEmbedded struct {

	// instrument identifier
	InstrumentIdentifier *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`
}

// Validate validates this get payment instrument o k body embedded
func (o *GetPaymentInstrumentOKBodyEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbedded) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(o.InstrumentIdentifier) { // not required
		return nil
	}

	if o.InstrumentIdentifier != nil {
		if err := o.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbedded) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbedded) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier get payment instrument o k body embedded instrument identifier
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier struct {

	// links
	Links *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo `json:"billTo,omitempty"`

	// card
	Card *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard `json:"card,omitempty"`

	// The id of the Instrument Identifier Token.
	//
	ID string `json:"id,omitempty"`

	// issuer
	Issuer *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer `json:"issuer,omitempty"`

	// metadata
	Metadata *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// tokenized card
	TokenizedCard *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard `json:"tokenizedCard,omitempty"`

	// The type of Instrument Identifier.
	// Valid values:
	// - enrollable card
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.BankAccount) { // not required
		return nil
	}

	if o.BankAccount != nil {
		if err := o.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(o.BillTo) { // not required
		return nil
	}

	if o.BillTo != nil {
		if err := o.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateIssuer(formats strfmt.Registry) error {

	if swag.IsZero(o.Issuer) { // not required
		return nil
	}

	if o.Issuer != nil {
		if err := o.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(o.Metadata) { // not required
		return nil
	}

	if o.Metadata != nil {
		if err := o.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.ProcessingInformation) { // not required
		return nil
	}

	if o.ProcessingInformation != nil {
		if err := o.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) validateTokenizedCard(formats strfmt.Registry) error {

	if swag.IsZero(o.TokenizedCard) { // not required
		return nil
	}

	if o.TokenizedCard != nil {
		if err := o.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount get payment instrument o k body embedded instrument identifier bank account
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount struct {

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier bank account
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(o.Number), 17); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier bill to
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(o.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address1", "body", string(o.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(o.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address2", "body", string(o.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(o.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"administrativeArea", "body", string(o.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(o.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"country", "body", string(o.Country), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(o.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"locality", "body", string(o.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(o.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"postalCode", "body", string(o.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card Verification Number.
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier card
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(o.Number) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(o.Number), 19); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard) validateSecurityCode(formats strfmt.Registry) error {

	if swag.IsZero(o.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"securityCode", "body", string(o.SecurityCode), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer get payment instrument o k body embedded instrument identifier issuer
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer struct {

	// This reference number serves as a link to the cardholder account and to all transactions for that account.
	//
	// Read Only: true
	// Max Length: 32
	PaymentAccountReference string `json:"paymentAccountReference,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier issuer
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer) validatePaymentAccountReference(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentAccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"issuer"+"."+"paymentAccountReference", "body", string(o.PaymentAccountReference), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks get payment instrument o k body embedded instrument identifier links
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks struct {

	// payment instruments
	PaymentInstruments *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf `json:"self,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier links
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(o.PaymentInstruments) { // not required
		return nil
	}

	if o.PaymentInstruments != nil {
		if err := o.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments get payment instrument o k body embedded instrument identifier links payment instruments
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments struct {

	// Link to the Instrument Identifiers Payment Instruments.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier links payment instruments
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf get payment instrument o k body embedded instrument identifier links self
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf struct {

	// Link to the Instrument Identifier.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier links self
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata get payment instrument o k body embedded instrument identifier metadata
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata struct {

	// The creator of the Instrument Identifier token.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier metadata
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation get payment instrument o k body embedded instrument identifier processing information
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier processing information
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.AuthorizationOptions) { // not required
		return nil
	}

	if o.AuthorizationOptions != nil {
		if err := o.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions get payment instrument o k body embedded instrument identifier processing information authorization options
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier processing information authorization options
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(o.Initiator) { // not required
		return nil
	}

	if o.Initiator != nil {
		if err := o.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator get payment instrument o k body embedded instrument identifier processing information authorization options initiator
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier processing information authorization options initiator
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if o.MerchantInitiatedTransaction != nil {
		if err := o.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction get payment instrument o k body embedded instrument identifier processing information authorization options initiator merchant initiated transaction
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_
	// in the reply message for either the original merchant-initiated payment in the series or the previous
	// merchant-initiated payment in the series.
	//
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier processing information authorization options initiator merchant initiated transaction
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(o.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(o.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard get payment instrument o k body embedded instrument identifier tokenized card
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard struct {

	// card
	Card *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard `json:"card,omitempty"`

	// Generated value used in conjunction with the network token for making a payment.
	//
	// Read Only: true
	Cryptogram string `json:"cryptogram,omitempty"`

	// Two-digit month in which the network token expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the network token expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The token requestors customer’s payment network token
	//
	// Read Only: true
	Number string `json:"number,omitempty"`

	// Issuers state for the network token
	// Valid values:
	// - ACTIVE
	// - SUSPENDED : This state can change to ACTIVE or DELETED.
	// - DELETED : This is a final state for the network token.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// The network token card association brand
	// Valid values:
	// - visa
	// - mastercard
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier tokenized card
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(o.Card) { // not required
		return nil
	}

	if o.Card != nil {
		if err := o.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard The latest card details associated with the network token
swagger:model GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard
*/
type GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard struct {

	//
	// Two-digit month in which the customer’s latest payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the customer’s latest payment card expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s latest payment card number suffix
	//
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this get payment instrument o k body embedded instrument identifier tokenized card card
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", string(o.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(o.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", string(o.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyEmbeddedInstrumentIdentifierTokenizedCardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyInstrumentIdentifier get payment instrument o k body instrument identifier
swagger:model GetPaymentInstrumentOKBodyInstrumentIdentifier
*/
type GetPaymentInstrumentOKBodyInstrumentIdentifier struct {

	// The id of the Instrument Identifier token linked to the Payment Instrument.
	//
	// Max Length: 32
	// Min Length: 12
	ID string `json:"id,omitempty"`
}

// Validate validates this get payment instrument o k body instrument identifier
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"instrumentIdentifier"+"."+"id", "body", string(o.ID), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyLinks get payment instrument o k body links
swagger:model GetPaymentInstrumentOKBodyLinks
*/
type GetPaymentInstrumentOKBodyLinks struct {

	// customer
	Customer *GetPaymentInstrumentOKBodyLinksCustomer `json:"customer,omitempty"`

	// self
	Self *GetPaymentInstrumentOKBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this get payment instrument o k body links
func (o *GetPaymentInstrumentOKBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyLinks) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(o.Customer) { // not required
		return nil
	}

	if o.Customer != nil {
		if err := o.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (o *GetPaymentInstrumentOKBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinks) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyLinksCustomer get payment instrument o k body links customer
swagger:model GetPaymentInstrumentOKBodyLinksCustomer
*/
type GetPaymentInstrumentOKBodyLinksCustomer struct {

	// Link to the Customer.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body links customer
func (o *GetPaymentInstrumentOKBodyLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksCustomer) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksCustomer) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyLinksSelf get payment instrument o k body links self
swagger:model GetPaymentInstrumentOKBodyLinksSelf
*/
type GetPaymentInstrumentOKBodyLinksSelf struct {

	// Link to the Payment Instrument.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this get payment instrument o k body links self
func (o *GetPaymentInstrumentOKBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyMerchantInformation get payment instrument o k body merchant information
swagger:model GetPaymentInstrumentOKBodyMerchantInformation
*/
type GetPaymentInstrumentOKBodyMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this get payment instrument o k body merchant information
func (o *GetPaymentInstrumentOKBodyMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDescriptor) { // not required
		return nil
	}

	if o.MerchantDescriptor != nil {
		if err := o.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor get payment instrument o k body merchant information merchant descriptor
swagger:model GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor
*/
type GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor struct {

	// Alternate contact information for your business,such as an email address or URL.
	// This value might be displayed on the cardholder’s statement.
	// When you do not include this value in your capture or credit request, CyberSource uses the merchant URL from your CyberSource account.
	// Important This value must consist of English characters
	//
	// Max Length: 13
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this get payment instrument o k body merchant information merchant descriptor
func (o *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlternateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) validateAlternateName(formats strfmt.Registry) error {

	if swag.IsZero(o.AlternateName) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"alternateName", "body", string(o.AlternateName), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyMetadata get payment instrument o k body metadata
swagger:model GetPaymentInstrumentOKBodyMetadata
*/
type GetPaymentInstrumentOKBodyMetadata struct {

	// The creator of the Payment Instrument token.
	//
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this get payment instrument o k body metadata
func (o *GetPaymentInstrumentOKBodyMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMetadata) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyMetadata) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyProcessingInformation get payment instrument o k body processing information
swagger:model GetPaymentInstrumentOKBodyProcessingInformation
*/
type GetPaymentInstrumentOKBodyProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Flag that indicates that this is a payment for a bill or for an existing contractual loan.
	// For processor-specific details, see the `bill_payment` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Valid values:
	// - `true`: Bill payment or loan payment.
	// - `false` (default): Not a bill payment or loan payment.
	//
	BillPaymentProgramEnabled bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this get payment instrument o k body processing information
func (o *GetPaymentInstrumentOKBodyProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(o.BankTransferOptions) { // not required
		return nil
	}

	if o.BankTransferOptions != nil {
		if err := o.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPaymentInstrumentOK" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformation) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions get payment instrument o k body processing information bank transfer options
swagger:model GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions
*/
type GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions struct {

	// Specifies the authorization method for the transaction.
	//
	// #### TeleCheck
	// Valid values:
	// - `ARC`: account receivable conversion
	// - `CCD`: corporate cash disbursement
	// - `POP`: point of purchase conversion
	// - `PPD`: prearranged payment and deposit entry
	// - `TEL`: telephone-initiated entry
	// - `WEB`: internet-initiated entry
	//
	// For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	// Max Length: 3
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this get payment instrument o k body processing information bank transfer options
func (o *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSECCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions) validateSECCode(formats strfmt.Registry) error {

	if swag.IsZero(o.SECCode) { // not required
		return nil
	}

	if err := validate.MaxLength("getPaymentInstrumentOK"+"."+"processingInformation"+"."+"bankTransferOptions"+"."+"SECCode", "body", string(o.SECCode), 3); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res GetPaymentInstrumentOKBodyProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
