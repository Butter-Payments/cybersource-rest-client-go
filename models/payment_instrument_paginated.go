// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentInstrumentPaginated payment instrument paginated
//
// swagger:model PaymentInstrumentPaginated
type PaymentInstrumentPaginated struct {

	// embedded
	Embedded *PaymentInstrumentPaginatedEmbedded `json:"_embedded,omitempty"`

	// links
	Links *PaymentInstrumentPaginatedLinks `json:"_links,omitempty"`

	// The number of Payment Instruments returned in the array.
	// Read Only: true
	Count int64 `json:"count,omitempty"`

	// The limit parameter supplied in the request.
	// Read Only: true
	Limit int64 `json:"limit,omitempty"`

	// The offset parameter supplied in the request.
	// Read Only: true
	Offset int64 `json:"offset,omitempty"`

	// The total number of Payment Instruments associated with the Customer or Instrument Identifier.
	// Read Only: true
	Total int64 `json:"total,omitempty"`
}

// Validate validates this payment instrument paginated
func (m *PaymentInstrumentPaginated) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginated) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginated) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginated) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginated) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginated
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbedded Payment Instrument Resources.
//
//
// swagger:model PaymentInstrumentPaginatedEmbedded
type PaymentInstrumentPaginatedEmbedded struct {

	// payment instruments
	// Read Only: true
	PaymentInstruments []*PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0 `json:"paymentInstruments"`
}

// Validate validates this payment instrument paginated embedded
func (m *PaymentInstrumentPaginatedEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbedded) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentInstruments) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentInstruments); i++ {
		if swag.IsZero(m.PaymentInstruments[i]) { // not required
			continue
		}

		if m.PaymentInstruments[i] != nil {
			if err := m.PaymentInstruments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "paymentInstruments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbedded) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0 payment instrument paginated embedded payment instruments items0
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0 struct {

	// embedded
	Embedded *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded `json:"_embedded,omitempty"`

	// links
	Links *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links `json:"_links,omitempty"`

	// bank account
	BankAccount *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card `json:"card,omitempty"`

	// The id of the Payment Instrument Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation `json:"merchantInformation,omitempty"`

	// metadata
	Metadata *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccount) { // not required
		return nil
	}

	if m.BankAccount != nil {
		if err := m.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bankAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(m.BillTo) { // not required
		return nil
	}

	if m.BillTo != nil {
		if err := m.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billTo")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.BuyerInformation) { // not required
		return nil
	}

	if m.BuyerInformation != nil {
		if err := m.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 32); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.InstrumentIdentifier) { // not required
		return nil
	}

	if m.InstrumentIdentifier != nil {
		if err := m.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantInformation) { // not required
		return nil
	}

	if m.MerchantInformation != nil {
		if err := m.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingInformation) { // not required
		return nil
	}

	if m.ProcessingInformation != nil {
		if err := m.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount payment instrument paginated embedded payment instruments items0 bank account
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount struct {

	// Account type.
	//
	// Valid values:
	//  - checking : C
	//  - general ledger : G This value is supported only on Wells Fargo ACH
	//  - savings : S (U.S. dollars only)
	//  - corporate checking : X (U.S. dollars only)
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 bank account
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("bankAccount"+"."+"type", "body", string(m.Type), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo payment instrument paginated embedded payment instruments items0 bill to
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer’s first name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer’s phone number.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 bill to
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"address1", "body", string(m.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"address2", "body", string(m.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"company", "body", string(m.Company), 60); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"country", "body", string(m.Country), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"email", "body", string(m.Email), 255); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"firstName", "body", string(m.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"lastName", "body", string(m.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"locality", "body", string(m.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"phoneNumber", "body", string(m.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("billTo"+"."+"postalCode", "body", string(m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation payment instrument paginated embedded payment instruments items0 buyer information
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation struct {

	// Company’s tax identifier. This is only used for eCheck service.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer. Format: YYYY-MM-DD
	//
	// Format: date
	DateOfBirth strfmt.Date `json:"dateOfBirth,omitempty"`

	// personal identification
	PersonalIdentification []*PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 buyer information
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(m.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"companyTaxID", "body", string(m.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"currency", "body", string(m.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation) validateDateOfBirth(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfBirth) { // not required
		return nil
	}

	if err := validate.FormatOf("buyerInformation"+"."+"dateOfBirth", "body", "date", m.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(m.PersonalIdentification); i++ {
		if swag.IsZero(m.PersonalIdentification[i]) { // not required
			continue
		}

		if m.PersonalIdentification[i] != nil {
			if err := m.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 payment instrument paginated embedded payment instruments items0 buyer information personal identification items0
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0 struct {

	// The value of the identification type.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// The type of the identification.
	//
	// Valid values:
	//   - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 buyer information personal identification items0
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 26); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuedBy) { // not required
		return nil
	}

	if m.IssuedBy != nil {
		if err := m.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy payment instrument paginated embedded payment instruments items0 buyer information personal identification items0 issued by
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// The State or province where the customer’s driver’s license was issued.
	//
	// Use the two-character State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 buyer information personal identification items0 issued by
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("issuedBy"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0BuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card payment instrument paginated embedded payment instruments items0 card
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.
	//
	// **Note** The issue number is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`.
	// Valid values: 01 through 12.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 4
	StartYear string `json:"startYear,omitempty"`

	// tokenized information
	TokenizedInformation *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation `json:"tokenizedInformation,omitempty"`

	// Value that indicates the card type. Valid v2 : v1 - description values:
	//   * 001 : visa
	//   * 002 : mastercard - Eurocard—European regional brand of Mastercard
	//   * 003 : american express
	//   * 004 : discover
	//   * 005 : diners club
	//   * 006 : carte blanche
	//   * 007 : jcb
	//   * 008 : optima
	//   * 011 : twinpay credit
	//   * 012 : twinpay debit
	//   * 013 : walmart
	//   * 014 : enRoute
	//   * 015 : lowes consumer
	//   * 016 : home depot consumer
	//   * 017 : mbna
	//   * 018 : dicks sportswear
	//   * 019 : casual corner
	//   * 020 : sears
	//   * 021 : jal
	//   * 023 : disney
	//   * 024 : maestro uk domestic
	//   * 025 : sams club consumer
	//   * 026 : sams club business
	//   * 028 : bill me later
	//   * 029 : bebe
	//   * 030 : restoration hardware
	//   * 031 : delta online — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * 032 : solo
	//   * 033 : visa electron
	//   * 034 : dankort
	//   * 035 : laser
	//   * 036 : carte bleue — formerly Cartes Bancaires
	//   * 037 : carta si
	//   * 038 : pinless debit
	//   * 039 : encoded account
	//   * 040 : uatp
	//   * 041 : household
	//   * 042 : maestro international
	//   * 043 : ge money uk
	//   * 044 : korean cards
	//   * 045 : style
	//   * 046 : jcrew
	//   * 047 : payease china processing ewallet
	//   * 048 : payease china processing bank transfer
	//   * 049 : meijer private label
	//   * 050 : hipercard — supported only by the Comercio Latino processor.
	//   * 051 : aura — supported only by the Comercio Latino processor.
	//   * 052 : redecard
	//   * 054 : elo — supported only by the Comercio Latino processor.
	//   * 055 : capital one private label
	//   * 056 : synchrony private label
	//   * 057 : costco private label
	//   * 060 : mada
	//   * 062 : china union pay
	//   * 063 : falabella private label
	//
	Type string `json:"type,omitempty"`

	// 'Payment Instrument was created / updated as part of a pinless debit transaction.'
	//
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 card
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenizedInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.IssueNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"issueNumber", "body", string(m.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.StartMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"startMonth", "body", string(m.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(m.StartYear) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"startYear", "body", string(m.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) validateTokenizedInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenizedInformation) { // not required
		return nil
	}

	if m.TokenizedInformation != nil {
		if err := m.TokenizedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("card" + "." + "tokenizedInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Card
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation payment instrument paginated embedded payment instruments items0 card tokenized information
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation struct {

	// Value that identifies your business and indicates that the cardholder’s account number is tokenized. This value
	// is assigned by the token service provider and is unique within the token service provider’s database.
	//
	// **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.
	//
	// Max Length: 11
	RequestorID string `json:"requestorID,omitempty"`

	// Type of transaction that provided the token data. This value does not specify the token service provider; it
	// specifies the entity that provided you with information about the token.
	//
	// Set the value for this field to 1. An application on the customer’s mobile device provided the token data.
	//
	// Max Length: 1
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 card tokenized information
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) validateRequestorID(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestorID) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"tokenizedInformation"+"."+"requestorID", "body", string(m.RequestorID), 11); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) validateTransactionType(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionType) { // not required
		return nil
	}

	if err := validate.MaxLength("card"+"."+"tokenizedInformation"+"."+"transactionType", "body", string(m.TransactionType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0CardTokenizedInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded Additional resources for the Payment Instrument token.
//
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded struct {

	// instrument identifier
	InstrumentIdentifier *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.InstrumentIdentifier) { // not required
		return nil
	}

	if m.InstrumentIdentifier != nil {
		if err := m.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Embedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier payment instrument paginated embedded payment instruments items0 embedded instrument identifier
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier struct {

	// links
	Links *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo `json:"billTo,omitempty"`

	// card
	Card *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard `json:"card,omitempty"`

	// The id of the Instrument Identifier Token.
	//
	ID string `json:"id,omitempty"`

	// issuer
	Issuer *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer `json:"issuer,omitempty"`

	// metadata
	Metadata *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// tokenized card
	TokenizedCard *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard `json:"tokenizedCard,omitempty"`

	// The type of Instrument Identifier.
	// Valid values:
	// - enrollable card
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccount) { // not required
		return nil
	}

	if m.BankAccount != nil {
		if err := m.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(m.BillTo) { // not required
		return nil
	}

	if m.BillTo != nil {
		if err := m.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateIssuer(formats strfmt.Registry) error {

	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingInformation) { // not required
		return nil
	}

	if m.ProcessingInformation != nil {
		if err := m.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) validateTokenizedCard(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenizedCard) { // not required
		return nil
	}

	if m.TokenizedCard != nil {
		if err := m.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount payment instrument paginated embedded payment instruments items0 embedded instrument identifier bank account
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount struct {

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier bank account
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(m.Number), 17); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier bill to
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address1", "body", string(m.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address2", "body", string(m.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"country", "body", string(m.Country), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"locality", "body", string(m.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"postalCode", "body", string(m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card Verification Number.
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier card
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := validate.MinLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(m.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(m.Number), 19); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) validateSecurityCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"securityCode", "body", string(m.SecurityCode), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer payment instrument paginated embedded payment instruments items0 embedded instrument identifier issuer
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer struct {

	// This reference number serves as a link to the cardholder account and to all transactions for that account.
	//
	// Read Only: true
	// Max Length: 32
	PaymentAccountReference string `json:"paymentAccountReference,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier issuer
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) validatePaymentAccountReference(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"issuer"+"."+"paymentAccountReference", "body", string(m.PaymentAccountReference), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks payment instrument paginated embedded payment instruments items0 embedded instrument identifier links
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks struct {

	// payment instruments
	PaymentInstruments *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf `json:"self,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier links
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentInstruments) { // not required
		return nil
	}

	if m.PaymentInstruments != nil {
		if err := m.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments payment instrument paginated embedded payment instruments items0 embedded instrument identifier links payment instruments
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments struct {

	// Link to the Instrument Identifiers Payment Instruments.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier links payment instruments
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf payment instrument paginated embedded payment instruments items0 embedded instrument identifier links self
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf struct {

	// Link to the Instrument Identifier.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier links self
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata payment instrument paginated embedded payment instruments items0 embedded instrument identifier metadata
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata struct {

	// The creator of the Instrument Identifier token.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier metadata
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorizationOptions) { // not required
		return nil
	}

	if m.AuthorizationOptions != nil {
		if err := m.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information authorization options
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information authorization options
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	if m.Initiator != nil {
		if err := m.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if m.MerchantInitiatedTransaction != nil {
		if err := m.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator merchant initiated transaction
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_
	// in the reply message for either the original merchant-initiated payment in the series or the previous
	// merchant-initiated payment in the series.
	//
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier processing information authorization options initiator merchant initiated transaction
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(m.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard payment instrument paginated embedded payment instruments items0 embedded instrument identifier tokenized card
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard struct {

	// card
	Card *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard `json:"card,omitempty"`

	// Generated value used in conjunction with the network token for making a payment.
	//
	// Read Only: true
	Cryptogram string `json:"cryptogram,omitempty"`

	// Two-digit month in which the network token expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the network token expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The token requestors customer’s payment network token
	//
	// Read Only: true
	Number string `json:"number,omitempty"`

	// Issuers state for the network token
	// Valid values:
	// - ACTIVE
	// - SUSPENDED : This state can change to ACTIVE or DELETED.
	// - DELETED : This is a final state for the network token.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// The network token card association brand
	// Valid values:
	// - visa
	// - mastercard
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier tokenized card
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard The latest card details associated with the network token
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard struct {

	//
	// Two-digit month in which the customer’s latest payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the customer’s latest payment card expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s latest payment card number suffix
	//
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 embedded instrument identifier tokenized card card
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0EmbeddedInstrumentIdentifierTokenizedCardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier payment instrument paginated embedded payment instruments items0 instrument identifier
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier struct {

	// The id of the Instrument Identifier token linked to the Payment Instrument.
	//
	// Max Length: 32
	// Min Length: 12
	ID string `json:"id,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 instrument identifier
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("instrumentIdentifier"+"."+"id", "body", string(m.ID), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("instrumentIdentifier"+"."+"id", "body", string(m.ID), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0InstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links payment instrument paginated embedded payment instruments items0 links
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links struct {

	// customer
	Customer *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer `json:"customer,omitempty"`

	// self
	Self *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf `json:"self,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 links
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer payment instrument paginated embedded payment instruments items0 links customer
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer struct {

	// Link to the Customer.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 links customer
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf payment instrument paginated embedded payment instruments items0 links self
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf struct {

	// Link to the Payment Instrument.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 links self
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0LinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation payment instrument paginated embedded payment instruments items0 merchant information
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 merchant information
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantDescriptor) { // not required
		return nil
	}

	if m.MerchantDescriptor != nil {
		if err := m.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor payment instrument paginated embedded payment instruments items0 merchant information merchant descriptor
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor struct {

	// Alternate contact information for your business,such as an email address or URL.
	// This value might be displayed on the cardholder’s statement.
	// When you do not include this value in your capture or credit request, CyberSource uses the merchant URL from your CyberSource account.
	// Important This value must consist of English characters
	//
	// Max Length: 13
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 merchant information merchant descriptor
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) validateAlternateName(formats strfmt.Registry) error {

	if swag.IsZero(m.AlternateName) { // not required
		return nil
	}

	if err := validate.MaxLength("merchantInformation"+"."+"merchantDescriptor"+"."+"alternateName", "body", string(m.AlternateName), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0MerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata payment instrument paginated embedded payment instruments items0 metadata
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata struct {

	// The creator of the Payment Instrument token.
	//
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 metadata
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation payment instrument paginated embedded payment instruments items0 processing information
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Flag that indicates that this is a payment for a bill or for an existing contractual loan.
	// For processor-specific details, see the `bill_payment` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Valid values:
	// - `true`: Bill payment or loan payment.
	// - `false` (default): Not a bill payment or loan payment.
	//
	BillPaymentProgramEnabled bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 processing information
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.BankTransferOptions) { // not required
		return nil
	}

	if m.BankTransferOptions != nil {
		if err := m.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions payment instrument paginated embedded payment instruments items0 processing information bank transfer options
//
// swagger:model PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions
type PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions struct {

	// Specifies the authorization method for the transaction.
	//
	// #### TeleCheck
	// Valid values:
	// - `ARC`: account receivable conversion
	// - `CCD`: corporate cash disbursement
	// - `POP`: point of purchase conversion
	// - `PPD`: prearranged payment and deposit entry
	// - `TEL`: telephone-initiated entry
	// - `WEB`: internet-initiated entry
	//
	// For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	// Max Length: 3
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this payment instrument paginated embedded payment instruments items0 processing information bank transfer options
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSECCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) validateSECCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SECCode) { // not required
		return nil
	}

	if err := validate.MaxLength("processingInformation"+"."+"bankTransferOptions"+"."+"SECCode", "body", string(m.SECCode), 3); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedEmbeddedPaymentInstrumentsItems0ProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedLinks payment instrument paginated links
//
// swagger:model PaymentInstrumentPaginatedLinks
type PaymentInstrumentPaginatedLinks struct {

	// first
	First *PaymentInstrumentPaginatedLinksFirst `json:"first,omitempty"`

	// last
	Last *PaymentInstrumentPaginatedLinksLast `json:"last,omitempty"`

	// next
	Next *PaymentInstrumentPaginatedLinksNext `json:"next,omitempty"`

	// prev
	Prev *PaymentInstrumentPaginatedLinksPrev `json:"prev,omitempty"`

	// self
	Self *PaymentInstrumentPaginatedLinksSelf `json:"self,omitempty"`
}

// Validate validates this payment instrument paginated links
func (m *PaymentInstrumentPaginatedLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInstrumentPaginatedLinks) validateFirst(formats strfmt.Registry) error {

	if swag.IsZero(m.First) { // not required
		return nil
	}

	if m.First != nil {
		if err := m.First.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "first")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedLinks) validateLast(formats strfmt.Registry) error {

	if swag.IsZero(m.Last) { // not required
		return nil
	}

	if m.Last != nil {
		if err := m.Last.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "last")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedLinks) validateNext(formats strfmt.Registry) error {

	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "next")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedLinks) validatePrev(formats strfmt.Registry) error {

	if swag.IsZero(m.Prev) { // not required
		return nil
	}

	if m.Prev != nil {
		if err := m.Prev.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "prev")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInstrumentPaginatedLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinks) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedLinksFirst payment instrument paginated links first
//
// swagger:model PaymentInstrumentPaginatedLinksFirst
type PaymentInstrumentPaginatedLinksFirst struct {

	// Link to the first page.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated links first
func (m *PaymentInstrumentPaginatedLinksFirst) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksFirst) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksFirst) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedLinksFirst
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedLinksLast payment instrument paginated links last
//
// swagger:model PaymentInstrumentPaginatedLinksLast
type PaymentInstrumentPaginatedLinksLast struct {

	// Link to the last page.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated links last
func (m *PaymentInstrumentPaginatedLinksLast) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksLast) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksLast) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedLinksLast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedLinksNext payment instrument paginated links next
//
// swagger:model PaymentInstrumentPaginatedLinksNext
type PaymentInstrumentPaginatedLinksNext struct {

	// Link to the next page.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated links next
func (m *PaymentInstrumentPaginatedLinksNext) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksNext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksNext) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedLinksNext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedLinksPrev payment instrument paginated links prev
//
// swagger:model PaymentInstrumentPaginatedLinksPrev
type PaymentInstrumentPaginatedLinksPrev struct {

	// Link to the previous page.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated links prev
func (m *PaymentInstrumentPaginatedLinksPrev) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksPrev) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksPrev) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedLinksPrev
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PaymentInstrumentPaginatedLinksSelf payment instrument paginated links self
//
// swagger:model PaymentInstrumentPaginatedLinksSelf
type PaymentInstrumentPaginatedLinksSelf struct {

	// Link to the current page.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this payment instrument paginated links self
func (m *PaymentInstrumentPaginatedLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInstrumentPaginatedLinksSelf) UnmarshalBinary(b []byte) error {
	var res PaymentInstrumentPaginatedLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
