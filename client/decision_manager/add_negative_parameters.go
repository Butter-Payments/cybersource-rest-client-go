// Code generated by go-swagger; DO NOT EDIT.

package decision_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAddNegativeParams creates a new AddNegativeParams object
// with the default values initialized.
func NewAddNegativeParams() *AddNegativeParams {
	var ()
	return &AddNegativeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddNegativeParamsWithTimeout creates a new AddNegativeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddNegativeParamsWithTimeout(timeout time.Duration) *AddNegativeParams {
	var ()
	return &AddNegativeParams{

		timeout: timeout,
	}
}

// NewAddNegativeParamsWithContext creates a new AddNegativeParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddNegativeParamsWithContext(ctx context.Context) *AddNegativeParams {
	var ()
	return &AddNegativeParams{

		Context: ctx,
	}
}

// NewAddNegativeParamsWithHTTPClient creates a new AddNegativeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddNegativeParamsWithHTTPClient(client *http.Client) *AddNegativeParams {
	var ()
	return &AddNegativeParams{
		HTTPClient: client,
	}
}

/*AddNegativeParams contains all the parameters to send to the API endpoint
for the add negative operation typically these are written to a http.Request
*/
type AddNegativeParams struct {

	/*AddNegativeListRequest*/
	AddNegativeListRequest AddNegativeBody
	/*Type
	  The list to be updated. It can be 'positive', 'negative' or 'review'.

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add negative params
func (o *AddNegativeParams) WithTimeout(timeout time.Duration) *AddNegativeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add negative params
func (o *AddNegativeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add negative params
func (o *AddNegativeParams) WithContext(ctx context.Context) *AddNegativeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add negative params
func (o *AddNegativeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add negative params
func (o *AddNegativeParams) WithHTTPClient(client *http.Client) *AddNegativeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add negative params
func (o *AddNegativeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddNegativeListRequest adds the addNegativeListRequest to the add negative params
func (o *AddNegativeParams) WithAddNegativeListRequest(addNegativeListRequest AddNegativeBody) *AddNegativeParams {
	o.SetAddNegativeListRequest(addNegativeListRequest)
	return o
}

// SetAddNegativeListRequest adds the addNegativeListRequest to the add negative params
func (o *AddNegativeParams) SetAddNegativeListRequest(addNegativeListRequest AddNegativeBody) {
	o.AddNegativeListRequest = addNegativeListRequest
}

// WithType adds the typeVar to the add negative params
func (o *AddNegativeParams) WithType(typeVar string) *AddNegativeParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the add negative params
func (o *AddNegativeParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *AddNegativeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.AddNegativeListRequest); err != nil {
		return err
	}

	// path param type
	if err := r.SetPathParam("type", o.Type); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
