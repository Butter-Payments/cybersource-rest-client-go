/**
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.V2paymentsProcessingInformationAuthorizationOptionsInitiator = factory(root.CyberSource.ApiClient, root.CyberSource.V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction);
  }
}(this, function(ApiClient, V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) {
  'use strict';




  /**
   * The V2paymentsProcessingInformationAuthorizationOptionsInitiator model module.
   * @module model/V2paymentsProcessingInformationAuthorizationOptionsInitiator
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>V2paymentsProcessingInformationAuthorizationOptionsInitiator</code>.
   * @alias module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiator
   * @class
   */
  var exports = function() {
    var _this = this;





  };

  /**
   * Constructs a <code>V2paymentsProcessingInformationAuthorizationOptionsInitiator</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiator} obj Optional instance to populate.
   * @return {module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiator} The populated <code>V2paymentsProcessingInformationAuthorizationOptionsInitiator</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
      if (data.hasOwnProperty('credentialStoredOnFile')) {
        obj['credentialStoredOnFile'] = ApiClient.convertToType(data['credentialStoredOnFile'], 'Boolean');
      }
      if (data.hasOwnProperty('storedCredentialUsed')) {
        obj['storedCredentialUsed'] = ApiClient.convertToType(data['storedCredentialUsed'], 'Boolean');
      }
      if (data.hasOwnProperty('merchantInitiatedTransaction')) {
        obj['merchantInitiatedTransaction'] = V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction.constructFromObject(data['merchantInitiatedTransaction']);
      }
    }
    return obj;
  }

  /**
   * This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction. 
   * @member {module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiator.TypeEnum} type
   */
  exports.prototype['type'] = undefined;
  /**
   * Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. 
   * @member {Boolean} credentialStoredOnFile
   */
  exports.prototype['credentialStoredOnFile'] = undefined;
  /**
   * Flag that indicates whether merchant is intend to use this transaction to store payment credential for follow-up merchant-initiated transactions or not. 
   * @member {Boolean} storedCredentialUsed
   */
  exports.prototype['storedCredentialUsed'] = undefined;
  /**
   * @member {module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction} merchantInitiatedTransaction
   */
  exports.prototype['merchantInitiatedTransaction'] = undefined;


  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "customer"
     * @const
     */
    "customer": "customer",
    /**
     * value: "merchant"
     * @const
     */
    "merchant": "merchant"  };


  return exports;
}));


