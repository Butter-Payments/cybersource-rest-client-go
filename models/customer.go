// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer customer
//
// swagger:model Customer
type Customer struct {

	// embedded
	Embedded *CustomerEmbedded `json:"_embedded,omitempty"`

	// links
	Links *CustomerLinks `json:"_links,omitempty"`

	// buyer information
	BuyerInformation *CustomerBuyerInformation `json:"buyerInformation,omitempty"`

	// client reference information
	ClientReferenceInformation *CustomerClientReferenceInformation `json:"clientReferenceInformation,omitempty"`

	// default payment instrument
	DefaultPaymentInstrument *CustomerDefaultPaymentInstrument `json:"defaultPaymentInstrument,omitempty"`

	// default shipping address
	DefaultShippingAddress *CustomerDefaultShippingAddress `json:"defaultShippingAddress,omitempty"`

	// The id of the Customer Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// Object containing the custom data that the merchant defines.
	//
	MerchantDefinedInformation []*CustomerMerchantDefinedInformationItems0 `json:"merchantDefinedInformation"`

	// metadata
	Metadata *CustomerMetadata `json:"metadata,omitempty"`

	// object information
	ObjectInformation *CustomerObjectInformation `json:"objectInformation,omitempty"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientReferenceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultPaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantDefinedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.BuyerInformation) { // not required
		return nil
	}

	if m.BuyerInformation != nil {
		if err := m.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateClientReferenceInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientReferenceInformation) { // not required
		return nil
	}

	if m.ClientReferenceInformation != nil {
		if err := m.ClientReferenceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceInformation")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateDefaultPaymentInstrument(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPaymentInstrument) { // not required
		return nil
	}

	if m.DefaultPaymentInstrument != nil {
		if err := m.DefaultPaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultPaymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateDefaultShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultShippingAddress) { // not required
		return nil
	}

	if m.DefaultShippingAddress != nil {
		if err := m.DefaultShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultShippingAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 32); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateMerchantDefinedInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantDefinedInformation) { // not required
		return nil
	}

	for i := 0; i < len(m.MerchantDefinedInformation); i++ {
		if swag.IsZero(m.MerchantDefinedInformation[i]) { // not required
			continue
		}

		if m.MerchantDefinedInformation[i] != nil {
			if err := m.MerchantDefinedInformation[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("merchantDefinedInformation" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Customer) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Customer) validateObjectInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectInformation) { // not required
		return nil
	}

	if m.ObjectInformation != nil {
		if err := m.ObjectInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerBuyerInformation customer buyer information
//
// swagger:model CustomerBuyerInformation
type CustomerBuyerInformation struct {

	// Customer's primary email address, including the full domain name.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Your identifier for the customer.
	//
	// Max Length: 100
	MerchantCustomerID string `json:"merchantCustomerID,omitempty"`
}

// Validate validates this customer buyer information
func (m *CustomerBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantCustomerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerBuyerInformation) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"email", "body", string(m.Email), 255); err != nil {
		return err
	}

	return nil
}

func (m *CustomerBuyerInformation) validateMerchantCustomerID(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantCustomerID) { // not required
		return nil
	}

	if err := validate.MaxLength("buyerInformation"+"."+"merchantCustomerID", "body", string(m.MerchantCustomerID), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerBuyerInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerBuyerInformation) UnmarshalBinary(b []byte) error {
	var res CustomerBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerClientReferenceInformation customer client reference information
//
// swagger:model CustomerClientReferenceInformation
type CustomerClientReferenceInformation struct {

	// Client-generated order reference or tracking number.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this customer client reference information
func (m *CustomerClientReferenceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerClientReferenceInformation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("clientReferenceInformation"+"."+"code", "body", string(m.Code), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerClientReferenceInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerClientReferenceInformation) UnmarshalBinary(b []byte) error {
	var res CustomerClientReferenceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerDefaultPaymentInstrument customer default payment instrument
//
// swagger:model CustomerDefaultPaymentInstrument
type CustomerDefaultPaymentInstrument struct {

	// The id of the Customers default Payment Instrument
	//
	ID string `json:"id,omitempty"`
}

// Validate validates this customer default payment instrument
func (m *CustomerDefaultPaymentInstrument) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerDefaultPaymentInstrument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerDefaultPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res CustomerDefaultPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerDefaultShippingAddress customer default shipping address
//
// swagger:model CustomerDefaultShippingAddress
type CustomerDefaultShippingAddress struct {

	// The id of the Customers default Shipping Address
	//
	ID string `json:"id,omitempty"`
}

// Validate validates this customer default shipping address
func (m *CustomerDefaultShippingAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerDefaultShippingAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerDefaultShippingAddress) UnmarshalBinary(b []byte) error {
	var res CustomerDefaultShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbedded Additional resources for the Customer token.
//
//
// swagger:model CustomerEmbedded
type CustomerEmbedded struct {

	// default payment instrument
	DefaultPaymentInstrument *CustomerEmbeddedDefaultPaymentInstrument `json:"defaultPaymentInstrument,omitempty"`

	// default shipping address
	DefaultShippingAddress *CustomerEmbeddedDefaultShippingAddress `json:"defaultShippingAddress,omitempty"`
}

// Validate validates this customer embedded
func (m *CustomerEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultPaymentInstrument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbedded) validateDefaultPaymentInstrument(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultPaymentInstrument) { // not required
		return nil
	}

	if m.DefaultPaymentInstrument != nil {
		if err := m.DefaultPaymentInstrument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbedded) validateDefaultShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultShippingAddress) { // not required
		return nil
	}

	if m.DefaultShippingAddress != nil {
		if err := m.DefaultShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultShippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbedded) UnmarshalBinary(b []byte) error {
	var res CustomerEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrument customer embedded default payment instrument
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrument
type CustomerEmbeddedDefaultPaymentInstrument struct {

	// embedded
	Embedded *CustomerEmbeddedDefaultPaymentInstrumentEmbedded `json:"_embedded,omitempty"`

	// links
	Links *CustomerEmbeddedDefaultPaymentInstrumentLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CustomerEmbeddedDefaultPaymentInstrumentBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *CustomerEmbeddedDefaultPaymentInstrumentBillTo `json:"billTo,omitempty"`

	// buyer information
	BuyerInformation *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation `json:"buyerInformation,omitempty"`

	// card
	Card *CustomerEmbeddedDefaultPaymentInstrumentCard `json:"card,omitempty"`

	// The id of the Payment Instrument Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// instrument identifier
	InstrumentIdentifier *CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`

	// merchant information
	MerchantInformation *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation `json:"merchantInformation,omitempty"`

	// metadata
	Metadata *CustomerEmbeddedDefaultPaymentInstrumentMetadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - paymentInstrument
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Read Only: true
	State string `json:"state,omitempty"`
}

// Validate validates this customer embedded default payment instrument
func (m *CustomerEmbeddedDefaultPaymentInstrument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerchantInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateEmbedded(formats strfmt.Registry) error {

	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccount) { // not required
		return nil
	}

	if m.BankAccount != nil {
		if err := m.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(m.BillTo) { // not required
		return nil
	}

	if m.BillTo != nil {
		if err := m.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateBuyerInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.BuyerInformation) { // not required
		return nil
	}

	if m.BuyerInformation != nil {
		if err := m.BuyerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"id", "body", string(m.ID), 32); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.InstrumentIdentifier) { // not required
		return nil
	}

	if m.InstrumentIdentifier != nil {
		if err := m.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateMerchantInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantInformation) { // not required
		return nil
	}

	if m.MerchantInformation != nil {
		if err := m.MerchantInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrument) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingInformation) { // not required
		return nil
	}

	if m.ProcessingInformation != nil {
		if err := m.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrument) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentBankAccount customer embedded default payment instrument bank account
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentBankAccount
type CustomerEmbeddedDefaultPaymentInstrumentBankAccount struct {

	// Account type.
	//
	// Valid values:
	//  - checking : C
	//  - general ledger : G This value is supported only on Wells Fargo ACH
	//  - savings : S (U.S. dollars only)
	//  - corporate checking : X (U.S. dollars only)
	//
	// Max Length: 1
	Type string `json:"type,omitempty"`
}

// Validate validates this customer embedded default payment instrument bank account
func (m *CustomerEmbeddedDefaultPaymentInstrumentBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBankAccount) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"bankAccount"+"."+"type", "body", string(m.Type), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBankAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBankAccount) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentBillTo customer embedded default payment instrument bill to
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentBillTo
type CustomerEmbeddedDefaultPaymentInstrumentBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Name of the customer’s company.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Customer's email address, including the full domain name.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Customer’s first name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Customer’s last name. This name must be the same as the name on the card.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Customer’s phone number.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this customer embedded default payment instrument bill to
func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"address1", "body", string(m.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"address2", "body", string(m.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"company", "body", string(m.Company), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"country", "body", string(m.Country), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"email", "body", string(m.Email), 255); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"firstName", "body", string(m.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"lastName", "body", string(m.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"locality", "body", string(m.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"phoneNumber", "body", string(m.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"billTo"+"."+"postalCode", "body", string(m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBillTo) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation customer embedded default payment instrument buyer information
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation
type CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation struct {

	// Company’s tax identifier. This is only used for eCheck service.
	//
	// Max Length: 9
	CompanyTaxID string `json:"companyTaxID,omitempty"`

	// Currency used for the order. Use the three-character I[ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// For details about currency as used in partial authorizations, see "Features for Debit Cards and Prepaid Cards" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Date of birth of the customer. Format: YYYY-MM-DD
	//
	// Format: date
	DateOfBirth strfmt.Date `json:"dateOfBirth,omitempty"`

	// personal identification
	PersonalIdentification []*CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0 `json:"personalIdentification"`
}

// Validate validates this customer embedded default payment instrument buyer information
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompanyTaxID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateOfBirth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersonalIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation) validateCompanyTaxID(formats strfmt.Registry) error {

	if swag.IsZero(m.CompanyTaxID) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"buyerInformation"+"."+"companyTaxID", "body", string(m.CompanyTaxID), 9); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"buyerInformation"+"."+"currency", "body", string(m.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation) validateDateOfBirth(formats strfmt.Registry) error {

	if swag.IsZero(m.DateOfBirth) { // not required
		return nil
	}

	if err := validate.FormatOf("_embedded"+"."+"defaultPaymentInstrument"+"."+"buyerInformation"+"."+"dateOfBirth", "body", "date", m.DateOfBirth.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation) validatePersonalIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.PersonalIdentification) { // not required
		return nil
	}

	for i := 0; i < len(m.PersonalIdentification); i++ {
		if swag.IsZero(m.PersonalIdentification[i]) { // not required
			continue
		}

		if m.PersonalIdentification[i] != nil {
			if err := m.PersonalIdentification[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "buyerInformation" + "." + "personalIdentification" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentBuyerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0 customer embedded default payment instrument buyer information personal identification items0
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0
type CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0 struct {

	// The value of the identification type.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// issued by
	IssuedBy *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy `json:"issuedBy,omitempty"`

	// The type of the identification.
	//
	// Valid values:
	//   - driver license
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this customer embedded default payment instrument buyer information personal identification items0
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuedBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 26); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) validateIssuedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuedBy) { // not required
		return nil
	}

	if m.IssuedBy != nil {
		if err := m.IssuedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuedBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy customer embedded default payment instrument buyer information personal identification items0 issued by
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy
type CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy struct {

	// The State or province where the customer’s driver’s license was issued.
	//
	// Use the two-character State, Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`
}

// Validate validates this customer embedded default payment instrument buyer information personal identification items0 issued by
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("issuedBy"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentBuyerInformationPersonalIdentificationItems0IssuedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentCard customer embedded default payment instrument card
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentCard
type CustomerEmbeddedDefaultPaymentInstrumentCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.
	//
	// **Note** The issue number is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	IssueNumber string `json:"issueNumber,omitempty"`

	// Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: MM`.
	// Valid values: 01 through 12.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 2
	StartMonth string `json:"startMonth,omitempty"`

	// Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. `Format: YYYY`.
	//
	// **Note** The start date is not required for Maestro (UK Domestic) transactions.
	//
	// Max Length: 4
	StartYear string `json:"startYear,omitempty"`

	// tokenized information
	TokenizedInformation *CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation `json:"tokenizedInformation,omitempty"`

	// Value that indicates the card type. Valid v2 : v1 - description values:
	//   * 001 : visa
	//   * 002 : mastercard - Eurocard—European regional brand of Mastercard
	//   * 003 : american express
	//   * 004 : discover
	//   * 005 : diners club
	//   * 006 : carte blanche
	//   * 007 : jcb
	//   * 008 : optima
	//   * 011 : twinpay credit
	//   * 012 : twinpay debit
	//   * 013 : walmart
	//   * 014 : enRoute
	//   * 015 : lowes consumer
	//   * 016 : home depot consumer
	//   * 017 : mbna
	//   * 018 : dicks sportswear
	//   * 019 : casual corner
	//   * 020 : sears
	//   * 021 : jal
	//   * 023 : disney
	//   * 024 : maestro uk domestic
	//   * 025 : sams club consumer
	//   * 026 : sams club business
	//   * 028 : bill me later
	//   * 029 : bebe
	//   * 030 : restoration hardware
	//   * 031 : delta online — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.
	//   * 032 : solo
	//   * 033 : visa electron
	//   * 034 : dankort
	//   * 035 : laser
	//   * 036 : carte bleue — formerly Cartes Bancaires
	//   * 037 : carta si
	//   * 038 : pinless debit
	//   * 039 : encoded account
	//   * 040 : uatp
	//   * 041 : household
	//   * 042 : maestro international
	//   * 043 : ge money uk
	//   * 044 : korean cards
	//   * 045 : style
	//   * 046 : jcrew
	//   * 047 : payease china processing ewallet
	//   * 048 : payease china processing bank transfer
	//   * 049 : meijer private label
	//   * 050 : hipercard — supported only by the Comercio Latino processor.
	//   * 051 : aura — supported only by the Comercio Latino processor.
	//   * 052 : redecard
	//   * 054 : elo — supported only by the Comercio Latino processor.
	//   * 055 : capital one private label
	//   * 056 : synchrony private label
	//   * 057 : costco private label
	//   * 060 : mada
	//   * 062 : china union pay
	//   * 063 : falabella private label
	//
	Type string `json:"type,omitempty"`

	// 'Payment Instrument was created / updated as part of a pinless debit transaction.'
	//
	UseAs string `json:"useAs,omitempty"`
}

// Validate validates this customer embedded default payment instrument card
func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenizedInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) validateIssueNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.IssueNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"issueNumber", "body", string(m.IssueNumber), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) validateStartMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.StartMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"startMonth", "body", string(m.StartMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) validateStartYear(formats strfmt.Registry) error {

	if swag.IsZero(m.StartYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"startYear", "body", string(m.StartYear), 4); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) validateTokenizedInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenizedInformation) { // not required
		return nil
	}

	if m.TokenizedInformation != nil {
		if err := m.TokenizedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "card" + "." + "tokenizedInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentCard) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation customer embedded default payment instrument card tokenized information
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation
type CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation struct {

	// Value that identifies your business and indicates that the cardholder’s account number is tokenized. This value
	// is assigned by the token service provider and is unique within the token service provider’s database.
	//
	// **Note** This field is supported only for **CyberSource through VisaNet** and **FDC Nashville Global**.
	//
	// Max Length: 11
	RequestorID string `json:"requestorID,omitempty"`

	// Type of transaction that provided the token data. This value does not specify the token service provider; it
	// specifies the entity that provided you with information about the token.
	//
	// Set the value for this field to 1. An application on the customer’s mobile device provided the token data.
	//
	// Max Length: 1
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this customer embedded default payment instrument card tokenized information
func (m *CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) validateRequestorID(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestorID) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"tokenizedInformation"+"."+"requestorID", "body", string(m.RequestorID), 11); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) validateTransactionType(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionType) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"card"+"."+"tokenizedInformation"+"."+"transactionType", "body", string(m.TransactionType), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentCardTokenizedInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbedded Additional resources for the Payment Instrument token.
//
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbedded
type CustomerEmbeddedDefaultPaymentInstrumentEmbedded struct {

	// instrument identifier
	InstrumentIdentifier *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier `json:"instrumentIdentifier,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstrumentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbedded) validateInstrumentIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.InstrumentIdentifier) { // not required
		return nil
	}

	if m.InstrumentIdentifier != nil {
		if err := m.InstrumentIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbedded) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier customer embedded default payment instrument embedded instrument identifier
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier struct {

	// links
	Links *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks `json:"_links,omitempty"`

	// bank account
	BankAccount *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount `json:"bankAccount,omitempty"`

	// bill to
	BillTo *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo `json:"billTo,omitempty"`

	// card
	Card *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard `json:"card,omitempty"`

	// The id of the Instrument Identifier Token.
	//
	ID string `json:"id,omitempty"`

	// issuer
	Issuer *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer `json:"issuer,omitempty"`

	// metadata
	Metadata *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata `json:"metadata,omitempty"`

	// The type of token.
	//
	// Valid values:
	// - instrumentIdentifier
	//
	// Read Only: true
	Object string `json:"object,omitempty"`

	// processing information
	ProcessingInformation *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation `json:"processingInformation,omitempty"`

	// Issuers state for the card number.
	// Valid values:
	// - ACTIVE
	// - CLOSED : The account has been closed.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// tokenized card
	TokenizedCard *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard `json:"tokenizedCard,omitempty"`

	// The type of Instrument Identifier.
	// Valid values:
	// - enrollable card
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenizedCard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateBankAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.BankAccount) { // not required
		return nil
	}

	if m.BankAccount != nil {
		if err := m.BankAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "bankAccount")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateBillTo(formats strfmt.Registry) error {

	if swag.IsZero(m.BillTo) { // not required
		return nil
	}

	if m.BillTo != nil {
		if err := m.BillTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "billTo")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateIssuer(formats strfmt.Registry) error {

	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateProcessingInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingInformation) { // not required
		return nil
	}

	if m.ProcessingInformation != nil {
		if err := m.ProcessingInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) validateTokenizedCard(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenizedCard) { // not required
		return nil
	}

	if m.TokenizedCard != nil {
		if err := m.TokenizedCard.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount customer embedded default payment instrument embedded instrument identifier bank account
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount struct {

	// Account number.
	//
	// When processing encoded account numbers, use this field for the encoded account number.
	//
	// Max Length: 17
	Number string `json:"number,omitempty"`

	// Bank routing number. This is also called the transit number.
	//
	// For details, see `ecp_rdfi` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	RoutingNumber string `json:"routingNumber,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier bank account
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"bankAccount"+"."+"number", "body", string(m.Number), 17); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBankAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo This information is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo struct {

	// Payment card billing street address as it appears on the credit card issuer’s records.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Additional address information.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the billing address. Use the State, Province, and Territory Codes for the United States
	// and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Payment card billing country. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Payment card billing city.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Postal code for the billing address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// **Example** `12345-6789`
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// **Example** `A1B 2C3`
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier bill to
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address1", "body", string(m.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"address2", "body", string(m.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"country", "body", string(m.Country), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"locality", "body", string(m.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"billTo"+"."+"postalCode", "body", string(m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierBillTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard The expirationMonth, expirationYear and securityCode is sent to the issuer as part of network token enrollment and is not stored under the Instrument Identifier token.
//
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard struct {

	// Two-digit month in which the payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the credit card expires.
	//
	// Format: `YYYY`.
	//
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s payment card number, also known as the Primary Account Number (PAN). You can also use this field
	// for encoded account numbers.
	//
	// Max Length: 19
	// Min Length: 12
	Number string `json:"number,omitempty"`

	// Card Verification Number.
	//
	// Max Length: 4
	SecurityCode string `json:"securityCode,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier card
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.Number) { // not required
		return nil
	}

	if err := validate.MinLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(m.Number), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"number", "body", string(m.Number), 19); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) validateSecurityCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"card"+"."+"securityCode", "body", string(m.SecurityCode), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer customer embedded default payment instrument embedded instrument identifier issuer
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer struct {

	// This reference number serves as a link to the cardholder account and to all transactions for that account.
	//
	// Read Only: true
	// Max Length: 32
	PaymentAccountReference string `json:"paymentAccountReference,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier issuer
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentAccountReference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) validatePaymentAccountReference(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAccountReference) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"issuer"+"."+"paymentAccountReference", "body", string(m.PaymentAccountReference), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks customer embedded default payment instrument embedded instrument identifier links
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks struct {

	// payment instruments
	PaymentInstruments *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf `json:"self,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier links
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentInstruments) { // not required
		return nil
	}

	if m.PaymentInstruments != nil {
		if err := m.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments customer embedded default payment instrument embedded instrument identifier links payment instruments
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments struct {

	// Link to the Instrument Identifiers Payment Instruments.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier links payment instruments
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf customer embedded default payment instrument embedded instrument identifier links self
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf struct {

	// Link to the Instrument Identifier.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier links self
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata customer embedded default payment instrument embedded instrument identifier metadata
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata struct {

	// The creator of the Instrument Identifier token.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier metadata
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation customer embedded default payment instrument embedded instrument identifier processing information
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation struct {

	// authorization options
	AuthorizationOptions *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions `json:"authorizationOptions,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier processing information
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) validateAuthorizationOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthorizationOptions) { // not required
		return nil
	}

	if m.AuthorizationOptions != nil {
		if err := m.AuthorizationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions customer embedded default payment instrument embedded instrument identifier processing information authorization options
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions struct {

	// initiator
	Initiator *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator `json:"initiator,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier processing information authorization options
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) validateInitiator(formats strfmt.Registry) error {

	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	if m.Initiator != nil {
		if err := m.Initiator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator customer embedded default payment instrument embedded instrument identifier processing information authorization options initiator
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator struct {

	// merchant initiated transaction
	MerchantInitiatedTransaction *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction `json:"merchantInitiatedTransaction,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier processing information authorization options initiator
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMerchantInitiatedTransaction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) validateMerchantInitiatedTransaction(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantInitiatedTransaction) { // not required
		return nil
	}

	if m.MerchantInitiatedTransaction != nil {
		if err := m.MerchantInitiatedTransaction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "processingInformation" + "." + "authorizationOptions" + "." + "initiator" + "." + "merchantInitiatedTransaction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction customer embedded default payment instrument embedded instrument identifier processing information authorization options initiator merchant initiated transaction
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction struct {

	// Network transaction identifier that was returned in the payment response field _processorInformation.transactionID_
	// in the reply message for either the original merchant-initiated payment in the series or the previous
	// merchant-initiated payment in the series.
	//
	// Max Length: 15
	PreviousTransactionID string `json:"previousTransactionId,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier processing information authorization options initiator merchant initiated transaction
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreviousTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) validatePreviousTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(m.PreviousTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"processingInformation"+"."+"authorizationOptions"+"."+"initiator"+"."+"merchantInitiatedTransaction"+"."+"previousTransactionId", "body", string(m.PreviousTransactionID), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard customer embedded default payment instrument embedded instrument identifier tokenized card
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard struct {

	// card
	Card *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard `json:"card,omitempty"`

	// Generated value used in conjunction with the network token for making a payment.
	//
	// Read Only: true
	Cryptogram string `json:"cryptogram,omitempty"`

	// Two-digit month in which the network token expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the network token expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The token requestors customer’s payment network token
	//
	// Read Only: true
	Number string `json:"number,omitempty"`

	// Issuers state for the network token
	// Valid values:
	// - ACTIVE
	// - SUSPENDED : This state can change to ACTIVE or DELETED.
	// - DELETED : This is a final state for the network token.
	//
	// Read Only: true
	State string `json:"state,omitempty"`

	// The network token card association brand
	// Valid values:
	// - visa
	// - mastercard
	//
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier tokenized card
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) validateCard(formats strfmt.Registry) error {

	if swag.IsZero(m.Card) { // not required
		return nil
	}

	if m.Card != nil {
		if err := m.Card.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_embedded" + "." + "instrumentIdentifier" + "." + "tokenizedCard" + "." + "card")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard The latest card details associated with the network token
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard
type CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard struct {

	//
	// Two-digit month in which the customer’s latest payment card expires.
	//
	// Format: `MM`.
	//
	// Valid values: `01` through `12`.
	//
	// Read Only: true
	// Max Length: 2
	ExpirationMonth string `json:"expirationMonth,omitempty"`

	// Four-digit year in which the customer’s latest payment card expires.
	//
	// Format: `YYYY`.
	//
	// Read Only: true
	// Max Length: 4
	ExpirationYear string `json:"expirationYear,omitempty"`

	// The customer’s latest payment card number suffix
	//
	// Read Only: true
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this customer embedded default payment instrument embedded instrument identifier tokenized card card
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationMonth) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationMonth", "body", string(m.ExpirationMonth), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) validateExpirationYear(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationYear) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"_embedded"+"."+"instrumentIdentifier"+"."+"tokenizedCard"+"."+"card"+"."+"expirationYear", "body", string(m.ExpirationYear), 4); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifierTokenizedCardCard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier customer embedded default payment instrument instrument identifier
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier
type CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier struct {

	// The id of the Instrument Identifier token linked to the Payment Instrument.
	//
	// Max Length: 32
	// Min Length: 12
	ID string `json:"id,omitempty"`
}

// Validate validates this customer embedded default payment instrument instrument identifier
func (m *CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"instrumentIdentifier"+"."+"id", "body", string(m.ID), 12); err != nil {
		return err
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"instrumentIdentifier"+"."+"id", "body", string(m.ID), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentInstrumentIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentLinks customer embedded default payment instrument links
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentLinks
type CustomerEmbeddedDefaultPaymentInstrumentLinks struct {

	// customer
	Customer *CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer `json:"customer,omitempty"`

	// self
	Self *CustomerEmbeddedDefaultPaymentInstrumentLinksSelf `json:"self,omitempty"`
}

// Validate validates this customer embedded default payment instrument links
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentLinks) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinks) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer customer embedded default payment instrument links customer
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer
type CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer struct {

	// Link to the Customer.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer embedded default payment instrument links customer
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentLinksSelf customer embedded default payment instrument links self
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentLinksSelf
type CustomerEmbeddedDefaultPaymentInstrumentLinksSelf struct {

	// Link to the Payment Instrument.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer embedded default payment instrument links self
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentLinksSelf) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation customer embedded default payment instrument merchant information
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation
type CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation struct {

	// merchant descriptor
	MerchantDescriptor *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor `json:"merchantDescriptor,omitempty"`
}

// Validate validates this customer embedded default payment instrument merchant information
func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMerchantDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation) validateMerchantDescriptor(formats strfmt.Registry) error {

	if swag.IsZero(m.MerchantDescriptor) { // not required
		return nil
	}

	if m.MerchantDescriptor != nil {
		if err := m.MerchantDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "merchantInformation" + "." + "merchantDescriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentMerchantInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor customer embedded default payment instrument merchant information merchant descriptor
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor
type CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor struct {

	// Alternate contact information for your business,such as an email address or URL.
	// This value might be displayed on the cardholder’s statement.
	// When you do not include this value in your capture or credit request, CyberSource uses the merchant URL from your CyberSource account.
	// Important This value must consist of English characters
	//
	// Max Length: 13
	AlternateName string `json:"alternateName,omitempty"`
}

// Validate validates this customer embedded default payment instrument merchant information merchant descriptor
func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) validateAlternateName(formats strfmt.Registry) error {

	if swag.IsZero(m.AlternateName) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"merchantInformation"+"."+"merchantDescriptor"+"."+"alternateName", "body", string(m.AlternateName), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentMerchantInformationMerchantDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentMetadata customer embedded default payment instrument metadata
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentMetadata
type CustomerEmbeddedDefaultPaymentInstrumentMetadata struct {

	// The creator of the Payment Instrument token.
	//
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this customer embedded default payment instrument metadata
func (m *CustomerEmbeddedDefaultPaymentInstrumentMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentMetadata) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation customer embedded default payment instrument processing information
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation
type CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation struct {

	// bank transfer options
	BankTransferOptions *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions `json:"bankTransferOptions,omitempty"`

	// Flag that indicates that this is a payment for a bill or for an existing contractual loan.
	// For processor-specific details, see the `bill_payment` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// Valid values:
	// - `true`: Bill payment or loan payment.
	// - `false` (default): Not a bill payment or loan payment.
	//
	BillPaymentProgramEnabled bool `json:"billPaymentProgramEnabled,omitempty"`
}

// Validate validates this customer embedded default payment instrument processing information
func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankTransferOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation) validateBankTransferOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.BankTransferOptions) { // not required
		return nil
	}

	if m.BankTransferOptions != nil {
		if err := m.BankTransferOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultPaymentInstrument" + "." + "processingInformation" + "." + "bankTransferOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentProcessingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions customer embedded default payment instrument processing information bank transfer options
//
// swagger:model CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions
type CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions struct {

	// Specifies the authorization method for the transaction.
	//
	// #### TeleCheck
	// Valid values:
	// - `ARC`: account receivable conversion
	// - `CCD`: corporate cash disbursement
	// - `POP`: point of purchase conversion
	// - `PPD`: prearranged payment and deposit entry
	// - `TEL`: telephone-initiated entry
	// - `WEB`: internet-initiated entry
	//
	// For details, see `ecp_sec_code` field description in the [Electronic Check Services Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/EChecks_SCMP_API/html/)
	//
	// Max Length: 3
	SECCode string `json:"SECCode,omitempty"`
}

// Validate validates this customer embedded default payment instrument processing information bank transfer options
func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSECCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) validateSECCode(formats strfmt.Registry) error {

	if swag.IsZero(m.SECCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultPaymentInstrument"+"."+"processingInformation"+"."+"bankTransferOptions"+"."+"SECCode", "body", string(m.SECCode), 3); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultPaymentInstrumentProcessingInformationBankTransferOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultShippingAddress customer embedded default shipping address
//
// swagger:model CustomerEmbeddedDefaultShippingAddress
type CustomerEmbeddedDefaultShippingAddress struct {

	// links
	Links *CustomerEmbeddedDefaultShippingAddressLinks `json:"_links,omitempty"`

	// The id of the Shipping Address Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *CustomerEmbeddedDefaultShippingAddressMetadata `json:"metadata,omitempty"`

	// ship to
	ShipTo *CustomerEmbeddedDefaultShippingAddressShipTo `json:"shipTo,omitempty"`
}

// Validate validates this customer embedded default shipping address
func (m *CustomerEmbeddedDefaultShippingAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddress) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultShippingAddress" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddress) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("_embedded"+"."+"defaultShippingAddress"+"."+"id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"id", "body", string(m.ID), 32); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddress) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultShippingAddress" + "." + "metadata")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddress) validateShipTo(formats strfmt.Registry) error {

	if swag.IsZero(m.ShipTo) { // not required
		return nil
	}

	if m.ShipTo != nil {
		if err := m.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultShippingAddress" + "." + "shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddress) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultShippingAddressLinks customer embedded default shipping address links
//
// swagger:model CustomerEmbeddedDefaultShippingAddressLinks
type CustomerEmbeddedDefaultShippingAddressLinks struct {

	// customer
	Customer *CustomerEmbeddedDefaultShippingAddressLinksCustomer `json:"customer,omitempty"`

	// self
	Self *CustomerEmbeddedDefaultShippingAddressLinksSelf `json:"self,omitempty"`
}

// Validate validates this customer embedded default shipping address links
func (m *CustomerEmbeddedDefaultShippingAddressLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressLinks) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded" + "." + "defaultShippingAddress" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressLinks) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultShippingAddressLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultShippingAddressLinksCustomer customer embedded default shipping address links customer
//
// swagger:model CustomerEmbeddedDefaultShippingAddressLinksCustomer
type CustomerEmbeddedDefaultShippingAddressLinksCustomer struct {

	// Link to the Customer
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer embedded default shipping address links customer
func (m *CustomerEmbeddedDefaultShippingAddressLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressLinksCustomer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressLinksCustomer) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultShippingAddressLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultShippingAddressLinksSelf customer embedded default shipping address links self
//
// swagger:model CustomerEmbeddedDefaultShippingAddressLinksSelf
type CustomerEmbeddedDefaultShippingAddressLinksSelf struct {

	// Link to the Customers Shipping Address
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer embedded default shipping address links self
func (m *CustomerEmbeddedDefaultShippingAddressLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressLinksSelf) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultShippingAddressLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultShippingAddressMetadata customer embedded default shipping address metadata
//
// swagger:model CustomerEmbeddedDefaultShippingAddressMetadata
type CustomerEmbeddedDefaultShippingAddressMetadata struct {

	// The creator of the Shipping Address token.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this customer embedded default shipping address metadata
func (m *CustomerEmbeddedDefaultShippingAddressMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressMetadata) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultShippingAddressMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerEmbeddedDefaultShippingAddressShipTo customer embedded default shipping address ship to
//
// swagger:model CustomerEmbeddedDefaultShippingAddressShipTo
type CustomerEmbeddedDefaultShippingAddressShipTo struct {

	// First line of the shipping address.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Second line of the shipping address.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the shipping address. Use 2 character the State,
	// Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Company associated with the shipping address.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the shipping address. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Email associated with the shipping address.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// First name of the recipient.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the shipping address.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Phone number associated with the shipping address.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the shipping address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// Example 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// Example A1B 2C3
	//
	// **American Express Direct**\
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the
	// remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this customer embedded default shipping address ship to
func (m *CustomerEmbeddedDefaultShippingAddressShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"address1", "body", string(m.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"address2", "body", string(m.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"company", "body", string(m.Company), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"country", "body", string(m.Country), 2); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"email", "body", string(m.Email), 320); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"firstName", "body", string(m.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"lastName", "body", string(m.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"locality", "body", string(m.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"phoneNumber", "body", string(m.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (m *CustomerEmbeddedDefaultShippingAddressShipTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("_embedded"+"."+"defaultShippingAddress"+"."+"shipTo"+"."+"postalCode", "body", string(m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressShipTo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerEmbeddedDefaultShippingAddressShipTo) UnmarshalBinary(b []byte) error {
	var res CustomerEmbeddedDefaultShippingAddressShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerLinks customer links
//
// swagger:model CustomerLinks
type CustomerLinks struct {

	// payment instruments
	PaymentInstruments *CustomerLinksPaymentInstruments `json:"paymentInstruments,omitempty"`

	// self
	Self *CustomerLinksSelf `json:"self,omitempty"`

	// shipping address
	ShippingAddress *CustomerLinksShippingAddress `json:"shippingAddress,omitempty"`
}

// Validate validates this customer links
func (m *CustomerLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentInstruments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerLinks) validatePaymentInstruments(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentInstruments) { // not required
		return nil
	}

	if m.PaymentInstruments != nil {
		if err := m.PaymentInstruments.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "paymentInstruments")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (m *CustomerLinks) validateShippingAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.ShippingAddress) { // not required
		return nil
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "shippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerLinks) UnmarshalBinary(b []byte) error {
	var res CustomerLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerLinksPaymentInstruments customer links payment instruments
//
// swagger:model CustomerLinksPaymentInstruments
type CustomerLinksPaymentInstruments struct {

	// Link to the Customers Payment Instruments.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer links payment instruments
func (m *CustomerLinksPaymentInstruments) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerLinksPaymentInstruments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerLinksPaymentInstruments) UnmarshalBinary(b []byte) error {
	var res CustomerLinksPaymentInstruments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerLinksSelf customer links self
//
// swagger:model CustomerLinksSelf
type CustomerLinksSelf struct {

	// Link to the Customer.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer links self
func (m *CustomerLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerLinksSelf) UnmarshalBinary(b []byte) error {
	var res CustomerLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerLinksShippingAddress customer links shipping address
//
// swagger:model CustomerLinksShippingAddress
type CustomerLinksShippingAddress struct {

	// Link to the Customers Shipping Addresses.
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this customer links shipping address
func (m *CustomerLinksShippingAddress) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerLinksShippingAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerLinksShippingAddress) UnmarshalBinary(b []byte) error {
	var res CustomerLinksShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerMerchantDefinedInformationItems0 customer merchant defined information items0
//
// swagger:model CustomerMerchantDefinedInformationItems0
type CustomerMerchantDefinedInformationItems0 struct {

	// The number you assign as the name for your merchant-defined data or secure field. Valid values are data1 to data4 and sensitive1 to sensitive4
	//
	// For example, to set the name for merchant-defined data 2 field, you would reference merchantDefinedInformation[x].name as data2
	// Valid values:
	// - data1
	// - data2
	// - data3
	// - data4
	// - sensitive1
	// - sensitive2
	// - sensitive3
	// - sensitive4
	//
	Name string `json:"name,omitempty"`

	// The value you assign for your merchant-defined data field.
	//
	// **Warning** Merchant-defined data fields are not intended to and must not be used to capture personally identifying information. Accordingly, merchants are prohibited from capturing, obtaining, and/or transmitting any personally identifying information in or via the merchant-defined data fields. Personally identifying information includes, but is not
	// limited to, address, credit card number, social security number, driver's license number, state-issued identification number, passport number, and card verification numbers (CVV,
	// CVC2, CVV2, CID, CVN). In the event CyberSource discovers that a merchant is capturing and/or transmitting personally identifying information via the merchant-defined data fields, whether or not intentionally, CyberSource will immediately suspend the merchant's account, which will result in a rejection of any and all transaction requests submitted by the merchant after the point of suspension.
	//
	// Max Length: 100
	Value string `json:"value,omitempty"`
}

// Validate validates this customer merchant defined information items0
func (m *CustomerMerchantDefinedInformationItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerMerchantDefinedInformationItems0) validateValue(formats strfmt.Registry) error {

	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if err := validate.MaxLength("value", "body", string(m.Value), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerMerchantDefinedInformationItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerMerchantDefinedInformationItems0) UnmarshalBinary(b []byte) error {
	var res CustomerMerchantDefinedInformationItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerMetadata customer metadata
//
// swagger:model CustomerMetadata
type CustomerMetadata struct {

	// The creator of the Customer token.
	//
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this customer metadata
func (m *CustomerMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerMetadata) UnmarshalBinary(b []byte) error {
	var res CustomerMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomerObjectInformation customer object information
//
// swagger:model CustomerObjectInformation
type CustomerObjectInformation struct {

	// Comments that you can make about the customer.
	//
	// Max Length: 150
	Comment string `json:"comment,omitempty"`

	// Name or title of the customer.
	//
	// Max Length: 60
	Title string `json:"title,omitempty"`
}

// Validate validates this customer object information
func (m *CustomerObjectInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerObjectInformation) validateComment(formats strfmt.Registry) error {

	if swag.IsZero(m.Comment) { // not required
		return nil
	}

	if err := validate.MaxLength("objectInformation"+"."+"comment", "body", string(m.Comment), 150); err != nil {
		return err
	}

	return nil
}

func (m *CustomerObjectInformation) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("objectInformation"+"."+"title", "body", string(m.Title), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerObjectInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerObjectInformation) UnmarshalBinary(b []byte) error {
	var res CustomerObjectInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
