// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShippingAddress shipping address
//
// swagger:model ShippingAddress
type ShippingAddress struct {

	// links
	Links *ShippingAddressLinks `json:"_links,omitempty"`

	// The id of the Shipping Address Token.
	// Max Length: 32
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// metadata
	Metadata *ShippingAddressMetadata `json:"metadata,omitempty"`

	// ship to
	ShipTo *ShippingAddressShipTo `json:"shipTo,omitempty"`
}

// Validate validates this shipping address
func (m *ShippingAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingAddress) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingAddress) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 32); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddress) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingAddress) validateShipTo(formats strfmt.Registry) error {

	if swag.IsZero(m.ShipTo) { // not required
		return nil
	}

	if m.ShipTo != nil {
		if err := m.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShippingAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingAddress) UnmarshalBinary(b []byte) error {
	var res ShippingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ShippingAddressLinks shipping address links
//
// swagger:model ShippingAddressLinks
type ShippingAddressLinks struct {

	// customer
	Customer *ShippingAddressLinksCustomer `json:"customer,omitempty"`

	// self
	Self *ShippingAddressLinksSelf `json:"self,omitempty"`
}

// Validate validates this shipping address links
func (m *ShippingAddressLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingAddressLinks) validateCustomer(formats strfmt.Registry) error {

	if swag.IsZero(m.Customer) { // not required
		return nil
	}

	if m.Customer != nil {
		if err := m.Customer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "customer")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingAddressLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(m.Self) { // not required
		return nil
	}

	if m.Self != nil {
		if err := m.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShippingAddressLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingAddressLinks) UnmarshalBinary(b []byte) error {
	var res ShippingAddressLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ShippingAddressLinksCustomer shipping address links customer
//
// swagger:model ShippingAddressLinksCustomer
type ShippingAddressLinksCustomer struct {

	// Link to the Customer
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this shipping address links customer
func (m *ShippingAddressLinksCustomer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShippingAddressLinksCustomer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingAddressLinksCustomer) UnmarshalBinary(b []byte) error {
	var res ShippingAddressLinksCustomer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ShippingAddressLinksSelf shipping address links self
//
// swagger:model ShippingAddressLinksSelf
type ShippingAddressLinksSelf struct {

	// Link to the Customers Shipping Address
	//
	// Read Only: true
	Href string `json:"href,omitempty"`
}

// Validate validates this shipping address links self
func (m *ShippingAddressLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShippingAddressLinksSelf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingAddressLinksSelf) UnmarshalBinary(b []byte) error {
	var res ShippingAddressLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ShippingAddressMetadata shipping address metadata
//
// swagger:model ShippingAddressMetadata
type ShippingAddressMetadata struct {

	// The creator of the Shipping Address token.
	// Read Only: true
	Creator string `json:"creator,omitempty"`
}

// Validate validates this shipping address metadata
func (m *ShippingAddressMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShippingAddressMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingAddressMetadata) UnmarshalBinary(b []byte) error {
	var res ShippingAddressMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ShippingAddressShipTo shipping address ship to
//
// swagger:model ShippingAddressShipTo
type ShippingAddressShipTo struct {

	// First line of the shipping address.
	//
	// Max Length: 60
	Address1 string `json:"address1,omitempty"`

	// Second line of the shipping address.
	//
	// Max Length: 60
	Address2 string `json:"address2,omitempty"`

	// State or province of the shipping address. Use 2 character the State,
	// Province, and Territory Codes for the United States and Canada.
	//
	// Max Length: 20
	AdministrativeArea string `json:"administrativeArea,omitempty"`

	// Company associated with the shipping address.
	//
	// Max Length: 60
	Company string `json:"company,omitempty"`

	// Country of the shipping address. Use the two-character ISO Standard Country Codes.
	//
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Email associated with the shipping address.
	//
	// Max Length: 320
	Email string `json:"email,omitempty"`

	// First name of the recipient.
	//
	// Max Length: 60
	FirstName string `json:"firstName,omitempty"`

	// Last name of the recipient.
	//
	// Max Length: 60
	LastName string `json:"lastName,omitempty"`

	// City of the shipping address.
	//
	// Max Length: 50
	Locality string `json:"locality,omitempty"`

	// Phone number associated with the shipping address.
	//
	// Max Length: 15
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postal code for the shipping address. The postal code must consist of 5 to 9 digits.
	//
	// When the billing country is the U.S., the 9-digit postal code must follow this format:
	// [5 digits][dash][4 digits]
	//
	// Example 12345-6789
	//
	// When the billing country is Canada, the 6-digit postal code must follow this format:
	// [alpha][numeric][alpha][space][numeric][alpha][numeric]
	//
	// Example A1B 2C3
	//
	// **American Express Direct**\
	// Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the
	// remaining value is longer than nine characters, truncates the value starting from the right side.
	//
	// Max Length: 10
	PostalCode string `json:"postalCode,omitempty"`
}

// Validate validates this shipping address ship to
func (m *ShippingAddressShipTo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdministrativeArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompany(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingAddressShipTo) validateAddress1(formats strfmt.Registry) error {

	if swag.IsZero(m.Address1) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"address1", "body", string(m.Address1), 60); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateAddress2(formats strfmt.Registry) error {

	if swag.IsZero(m.Address2) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"address2", "body", string(m.Address2), 60); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateAdministrativeArea(formats strfmt.Registry) error {

	if swag.IsZero(m.AdministrativeArea) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"administrativeArea", "body", string(m.AdministrativeArea), 20); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateCompany(formats strfmt.Registry) error {

	if swag.IsZero(m.Company) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"company", "body", string(m.Company), 60); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"country", "body", string(m.Country), 2); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"email", "body", string(m.Email), 320); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"firstName", "body", string(m.FirstName), 60); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"lastName", "body", string(m.LastName), 60); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validateLocality(formats strfmt.Registry) error {

	if swag.IsZero(m.Locality) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"locality", "body", string(m.Locality), 50); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validatePhoneNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.PhoneNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"phoneNumber", "body", string(m.PhoneNumber), 15); err != nil {
		return err
	}

	return nil
}

func (m *ShippingAddressShipTo) validatePostalCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := validate.MaxLength("shipTo"+"."+"postalCode", "body", string(m.PostalCode), 10); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShippingAddressShipTo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingAddressShipTo) UnmarshalBinary(b []byte) error {
	var res ShippingAddressShipTo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
