// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateInvoiceReader is a Reader for the CreateInvoice structure.
type CreateInvoiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInvoiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateInvoiceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateInvoiceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInvoiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInvoiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateInvoiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateInvoiceCreated creates a CreateInvoiceCreated with default headers values
func NewCreateInvoiceCreated() *CreateInvoiceCreated {
	return &CreateInvoiceCreated{}
}

/*CreateInvoiceCreated handles this case with default header values.

Created.
*/
type CreateInvoiceCreated struct {
	Payload *CreateInvoiceCreatedBody
}

func (o *CreateInvoiceCreated) Error() string {
	return fmt.Sprintf("[POST /invoicing/v2/invoices][%d] createInvoiceCreated  %+v", 201, o.Payload)
}

func (o *CreateInvoiceCreated) GetPayload() *CreateInvoiceCreatedBody {
	return o.Payload
}

func (o *CreateInvoiceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateInvoiceCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInvoiceAccepted creates a CreateInvoiceAccepted with default headers values
func NewCreateInvoiceAccepted() *CreateInvoiceAccepted {
	return &CreateInvoiceAccepted{}
}

/*CreateInvoiceAccepted handles this case with default header values.

Invoice created but failed to send an email. Send the invoice separately.
*/
type CreateInvoiceAccepted struct {
	Payload *CreateInvoiceAcceptedBody
}

func (o *CreateInvoiceAccepted) Error() string {
	return fmt.Sprintf("[POST /invoicing/v2/invoices][%d] createInvoiceAccepted  %+v", 202, o.Payload)
}

func (o *CreateInvoiceAccepted) GetPayload() *CreateInvoiceAcceptedBody {
	return o.Payload
}

func (o *CreateInvoiceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateInvoiceAcceptedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInvoiceBadRequest creates a CreateInvoiceBadRequest with default headers values
func NewCreateInvoiceBadRequest() *CreateInvoiceBadRequest {
	return &CreateInvoiceBadRequest{}
}

/*CreateInvoiceBadRequest handles this case with default header values.

Invalid request.
*/
type CreateInvoiceBadRequest struct {
	Payload *CreateInvoiceBadRequestBody
}

func (o *CreateInvoiceBadRequest) Error() string {
	return fmt.Sprintf("[POST /invoicing/v2/invoices][%d] createInvoiceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInvoiceBadRequest) GetPayload() *CreateInvoiceBadRequestBody {
	return o.Payload
}

func (o *CreateInvoiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateInvoiceBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInvoiceNotFound creates a CreateInvoiceNotFound with default headers values
func NewCreateInvoiceNotFound() *CreateInvoiceNotFound {
	return &CreateInvoiceNotFound{}
}

/*CreateInvoiceNotFound handles this case with default header values.

The specified resource is not found.
*/
type CreateInvoiceNotFound struct {
	Payload *CreateInvoiceNotFoundBody
}

func (o *CreateInvoiceNotFound) Error() string {
	return fmt.Sprintf("[POST /invoicing/v2/invoices][%d] createInvoiceNotFound  %+v", 404, o.Payload)
}

func (o *CreateInvoiceNotFound) GetPayload() *CreateInvoiceNotFoundBody {
	return o.Payload
}

func (o *CreateInvoiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateInvoiceNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInvoiceDefault creates a CreateInvoiceDefault with default headers values
func NewCreateInvoiceDefault(code int) *CreateInvoiceDefault {
	return &CreateInvoiceDefault{
		_statusCode: code,
	}
}

/*CreateInvoiceDefault handles this case with default header values.

Unexpected error.
*/
type CreateInvoiceDefault struct {
	_statusCode int

	Payload *CreateInvoiceDefaultBody
}

// Code gets the status code for the create invoice default response
func (o *CreateInvoiceDefault) Code() int {
	return o._statusCode
}

func (o *CreateInvoiceDefault) Error() string {
	return fmt.Sprintf("[POST /invoicing/v2/invoices][%d] createInvoice default  %+v", o._statusCode, o.Payload)
}

func (o *CreateInvoiceDefault) GetPayload() *CreateInvoiceDefaultBody {
	return o.Payload
}

func (o *CreateInvoiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateInvoiceDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateInvoiceAcceptedBody invoicingV2InvoicesPost202Response
swagger:model CreateInvoiceAcceptedBody
*/
type CreateInvoiceAcceptedBody struct {

	// details
	Details []*CreateInvoiceAcceptedBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	// - ACCEPTED
	//
	Reason string `json:"reason,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	// - DRAFT
	// - CREATED
	// - SENT
	// - PARTIAL
	// - PAID
	// - CANCELED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create invoice accepted body
func (o *CreateInvoiceAcceptedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceAcceptedBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createInvoiceAccepted" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceAcceptedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceAcceptedBody) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceAcceptedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceAcceptedBodyDetailsItems0 create invoice accepted body details items0
swagger:model CreateInvoiceAcceptedBodyDetailsItems0
*/
type CreateInvoiceAcceptedBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create invoice accepted body details items0
func (o *CreateInvoiceAcceptedBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceAcceptedBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceAcceptedBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceAcceptedBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceBadRequestBody invoicingV2InvoicesPost400Response
swagger:model CreateInvoiceBadRequestBody
*/
type CreateInvoiceBadRequestBody struct {

	// details
	Details []*CreateInvoiceBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//
	Reason string `json:"reason,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	//   - BADREQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create invoice bad request body
func (o *CreateInvoiceBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createInvoiceBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceBadRequestBodyDetailsItems0 create invoice bad request body details items0
swagger:model CreateInvoiceBadRequestBodyDetailsItems0
*/
type CreateInvoiceBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create invoice bad request body details items0
func (o *CreateInvoiceBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceBody create invoice body
swagger:model CreateInvoiceBody
*/
type CreateInvoiceBody struct {

	// customer information
	CustomerInformation *CreateInvoiceParamsBodyCustomerInformation `json:"customerInformation,omitempty"`

	// invoice information
	InvoiceInformation *CreateInvoiceParamsBodyInvoiceInformation `json:"invoiceInformation,omitempty"`

	// order information
	OrderInformation *CreateInvoiceParamsBodyOrderInformation `json:"orderInformation,omitempty"`
}

// Validate validates this create invoice body
func (o *CreateInvoiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvoiceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceBody) validateCustomerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomerInformation) { // not required
		return nil
	}

	if o.CustomerInformation != nil {
		if err := o.CustomerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceRequest" + "." + "customerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceBody) validateInvoiceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.InvoiceInformation) { // not required
		return nil
	}

	if o.InvoiceInformation != nil {
		if err := o.InvoiceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceRequest" + "." + "invoiceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceBody) validateOrderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceRequest" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceBody) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBody invoicingV2InvoicesPost201Response
swagger:model CreateInvoiceCreatedBody
*/
type CreateInvoiceCreatedBody struct {

	// links
	Links *CreateInvoiceCreatedBodyLinks `json:"_links,omitempty"`

	// customer information
	CustomerInformation *CreateInvoiceCreatedBodyCustomerInformation `json:"customerInformation,omitempty"`

	// An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// #### PIN debit
	// Returned for all PIN debit services.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// invoice information
	InvoiceInformation *CreateInvoiceCreatedBodyInvoiceInformation `json:"invoiceInformation,omitempty"`

	// order information
	OrderInformation *CreateInvoiceCreatedBodyOrderInformation `json:"orderInformation,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	// - DRAFT
	// - CREATED
	// - SENT
	// - PARTIAL
	// - PAID
	// - CANCELED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create invoice created body
func (o *CreateInvoiceCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomerInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvoiceInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBody) validateCustomerInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomerInformation) { // not required
		return nil
	}

	if o.CustomerInformation != nil {
		if err := o.CustomerInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "customerInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"id", "body", string(o.ID), 26); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBody) validateInvoiceInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.InvoiceInformation) { // not required
		return nil
	}

	if o.InvoiceInformation != nil {
		if err := o.InvoiceInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "invoiceInformation")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBody) validateOrderInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderInformation) { // not required
		return nil
	}

	if o.OrderInformation != nil {
		if err := o.OrderInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "orderInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyCustomerInformation Contains all of the customer-related fields for the invoice.
swagger:model CreateInvoiceCreatedBodyCustomerInformation
*/
type CreateInvoiceCreatedBodyCustomerInformation struct {

	// Customer's email address, including the full domain name.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_email` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### Invoicing
	// Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Payer name for the invoice.
	// Max Length: 100
	Name string `json:"name,omitempty"`
}

// Validate validates this create invoice created body customer information
func (o *CreateInvoiceCreatedBodyCustomerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyCustomerInformation) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"customerInformation"+"."+"email", "body", string(o.Email), 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyCustomerInformation) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"customerInformation"+"."+"name", "body", string(o.Name), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyCustomerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyCustomerInformation) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyCustomerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyInvoiceInformation Contains all of the invoice-specific fields, such as the invoice number and due date.
swagger:model CreateInvoiceCreatedBodyInvoiceInformation
*/
type CreateInvoiceCreatedBodyInvoiceInformation struct {

	// If set to `true`, the payer can make a partial invoice payment.
	AllowPartialPayments bool `json:"allowPartialPayments,omitempty"`

	// If set to `None`, the invoice is created, and its status is set to 'CREATED', but no email is sent.
	//
	// Possible values:
	//  - `None`
	//  - `Email`
	//
	DeliveryMode string `json:"deliveryMode,omitempty"`

	// The description included in the invoice.
	// Max Length: 2000
	Description string `json:"description,omitempty"`

	// The invoice due date. This field is required for creating an invoice.
	// Format: `YYYY-MM-DD`, where `YYYY` = year, `MM` = month, and `DD` = day
	//
	// Format: date
	DueDate strfmt.Date `json:"dueDate,omitempty"`

	// Invoice Number.
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// Returns the payment link to an invoice when the invoice status is `SENT`, `CREATED`, `PARTIAL`, or `PAID`.
	PaymentLink string `json:"paymentLink,omitempty"`
}

// Validate validates this create invoice created body invoice information
func (o *CreateInvoiceCreatedBodyInvoiceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDueDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyInvoiceInformation) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"invoiceInformation"+"."+"description", "body", string(o.Description), 2000); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyInvoiceInformation) validateDueDate(formats strfmt.Registry) error {

	if swag.IsZero(o.DueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createInvoiceCreated"+"."+"invoiceInformation"+"."+"dueDate", "body", "date", o.DueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyInvoiceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyInvoiceInformation) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyInvoiceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyLinks create invoice created body links
swagger:model CreateInvoiceCreatedBodyLinks
*/
type CreateInvoiceCreatedBodyLinks struct {

	// cancel
	Cancel *CreateInvoiceCreatedBodyLinksCancel `json:"cancel,omitempty"`

	// deliver
	Deliver *CreateInvoiceCreatedBodyLinksDeliver `json:"deliver,omitempty"`

	// self
	Self *CreateInvoiceCreatedBodyLinksSelf `json:"self,omitempty"`

	// update
	Update *CreateInvoiceCreatedBodyLinksUpdate `json:"update,omitempty"`
}

// Validate validates this create invoice created body links
func (o *CreateInvoiceCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCancel(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeliver(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyLinks) validateCancel(formats strfmt.Registry) error {

	if swag.IsZero(o.Cancel) { // not required
		return nil
	}

	if o.Cancel != nil {
		if err := o.Cancel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "_links" + "." + "cancel")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyLinks) validateDeliver(formats strfmt.Registry) error {

	if swag.IsZero(o.Deliver) { // not required
		return nil
	}

	if o.Deliver != nil {
		if err := o.Deliver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "_links" + "." + "deliver")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyLinks) validateUpdate(formats strfmt.Registry) error {

	if swag.IsZero(o.Update) { // not required
		return nil
	}

	if o.Update != nil {
		if err := o.Update.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "_links" + "." + "update")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyLinksCancel create invoice created body links cancel
swagger:model CreateInvoiceCreatedBodyLinksCancel
*/
type CreateInvoiceCreatedBodyLinksCancel struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create invoice created body links cancel
func (o *CreateInvoiceCreatedBodyLinksCancel) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksCancel) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksCancel) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyLinksCancel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyLinksDeliver create invoice created body links deliver
swagger:model CreateInvoiceCreatedBodyLinksDeliver
*/
type CreateInvoiceCreatedBodyLinksDeliver struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create invoice created body links deliver
func (o *CreateInvoiceCreatedBodyLinksDeliver) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksDeliver) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksDeliver) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyLinksDeliver
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyLinksSelf create invoice created body links self
swagger:model CreateInvoiceCreatedBodyLinksSelf
*/
type CreateInvoiceCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create invoice created body links self
func (o *CreateInvoiceCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyLinksUpdate create invoice created body links update
swagger:model CreateInvoiceCreatedBodyLinksUpdate
*/
type CreateInvoiceCreatedBodyLinksUpdate struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this create invoice created body links update
func (o *CreateInvoiceCreatedBodyLinksUpdate) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksUpdate) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyLinksUpdate) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyLinksUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyOrderInformation Contains all of the order-related fields for the invoice.
swagger:model CreateInvoiceCreatedBodyOrderInformation
*/
type CreateInvoiceCreatedBodyOrderInformation struct {

	// amount details
	AmountDetails *CreateInvoiceCreatedBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// line items
	// Max Items: 30
	LineItems []*CreateInvoiceCreatedBodyOrderInformationLineItemsItems0 `json:"lineItems"`
}

// Validate validates this create invoice created body order information
func (o *CreateInvoiceCreatedBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformation) validateLineItems(formats strfmt.Registry) error {

	if swag.IsZero(o.LineItems) { // not required
		return nil
	}

	iLineItemsSize := int64(len(o.LineItems))

	if err := validate.MaxItems("createInvoiceCreated"+"."+"orderInformation"+"."+"lineItems", "body", iLineItemsSize, 30); err != nil {
		return err
	}

	for i := 0; i < len(o.LineItems); i++ {
		if swag.IsZero(o.LineItems[i]) { // not required
			continue
		}

		if o.LineItems[i] != nil {
			if err := o.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createInvoiceCreated" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyOrderInformationAmountDetails Contains all of the amount-related fields in the invoice.
swagger:model CreateInvoiceCreatedBodyOrderInformationAmountDetails
*/
type CreateInvoiceCreatedBodyOrderInformationAmountDetails struct {

	// Remaining balance on the account.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Remaining balance on the prepaid card.
	//
	// Returned by PIN debit purchase.
	//
	// Max Length: 12
	BalanceAmount string `json:"balanceAmount,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Total discount amount applied to the order.
	//
	// Max Length: 15
	DiscountAmount string `json:"discountAmount,omitempty"`

	// The total discount percentage applied to the invoice.
	DiscountPercent float64 `json:"discountPercent,omitempty"`

	// freight
	Freight *CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight `json:"freight,omitempty"`

	// The minimum partial amount required to pay the invoice.
	MinimumPartialAmount float64 `json:"minimumPartialAmount,omitempty"`

	// Sub-amount of the invoice.
	SubAmount float64 `json:"subAmount,omitempty"`

	// tax details
	TaxDetails *CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails `json:"taxDetails,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this create invoice created body order information amount details
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBalanceAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDiscountAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFreight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) validateBalanceAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.BalanceAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"balanceAmount", "body", string(o.BalanceAmount), 12); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) validateDiscountAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.DiscountAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"discountAmount", "body", string(o.DiscountAmount), 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) validateFreight(formats strfmt.Registry) error {

	if swag.IsZero(o.Freight) { // not required
		return nil
	}

	if o.Freight != nil {
		if err := o.Freight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "orderInformation" + "." + "amountDetails" + "." + "freight")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) validateTaxDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.TaxDetails) { // not required
		return nil
	}

	if o.TaxDetails != nil {
		if err := o.TaxDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceCreated" + "." + "orderInformation" + "." + "amountDetails" + "." + "taxDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", string(o.TotalAmount), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight Contains all of the shipping-related fields for the invoice.
swagger:model CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight
*/
type CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight struct {

	// Total freight or shipping and handling charges for the order. When you include this field in your request, you
	// must also include the **totalAmount** field.
	//
	// For processor-specific information, see the freight_amount field in
	// [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
	//
	// Max Length: 13
	Amount string `json:"amount,omitempty"`

	// Flag that indicates whether an order is taxable. This value must be true if the sum of all _lineItems[].taxAmount_ values > 0.
	//
	// If you do not include any `lineItems[].taxAmount` values in your request, CyberSource does not include
	// `invoiceDetails.taxable` in the data it sends to the processor.
	//
	// For processor-specific information, see the `tax_indicator` field in
	// [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
	//
	// Possible values:
	//  - **true**
	//  - **false**
	//
	Taxable bool `json:"taxable,omitempty"`
}

// Validate validates this create invoice created body order information amount details freight
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"freight"+"."+"amount", "body", string(o.Amount), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyOrderInformationAmountDetailsFreight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails Contains all of the tax-related fields for the invoice.
swagger:model CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails
*/
type CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails struct {

	// Indicates the amount of tax based on the `type` field as described in the table below:
	//
	// | type      | type description |
	// | ------------- |:-------------:|
	// | `alternate` | Total amount of alternate tax for the order. |
	// | `local`     | Sales tax for the order. |
	// | `national`  | National tax for the order. |
	// | `vat`       | Total amount of value added tax (VAT) included in the order. |
	// | `other`     | Other tax. |
	//
	// Max Length: 13
	Amount string `json:"amount,omitempty"`

	// Rate of VAT or other tax for the order.
	//
	// Example 0.040 (=4%)
	//
	// Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional
	// decimal places will be truncated)
	//
	// For processor-specific details, see the `alternate_tax_amount`, `vat_rate`, `vat_tax_rate`, `local_tax`, `national_tax`, `vat_tax_amount` or `other_tax#_rate` field descriptions in the [Level II and Level III Processing Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
	//
	// Max Length: 6
	Rate string `json:"rate,omitempty"`

	// Indicates the type of tax data for the _taxDetails_ object.
	//
	// Possible values:
	//
	// - `alternate`
	// - `local`
	// - `national`
	// - `vat`
	// - `other`
	//
	// For processor-specific details, see the `alternate_tax_amount`, `local_tax`, `national_tax` or `vat_tax_amount` field
	// descriptions in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create invoice created body order information amount details tax details
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"taxDetails"+"."+"amount", "body", string(o.Amount), 13); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails) validateRate(formats strfmt.Registry) error {

	if swag.IsZero(o.Rate) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceCreated"+"."+"orderInformation"+"."+"amountDetails"+"."+"taxDetails"+"."+"rate", "body", string(o.Rate), 6); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyOrderInformationAmountDetailsTaxDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceCreatedBodyOrderInformationLineItemsItems0 List of the line items from the order, which are included in an invoice.
swagger:model CreateInvoiceCreatedBodyOrderInformationLineItemsItems0
*/
type CreateInvoiceCreatedBodyOrderInformationLineItemsItems0 struct {

	// For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of
	// the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Max Length: 255
	ProductName string `json:"productName,omitempty"`

	// Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.
	//
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is
	// required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
	//
	// Max Length: 255
	ProductSku string `json:"productSku,omitempty"`

	// Number of units for this order. Must be a non-negative integer.
	//
	// The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values
	// related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Maximum: 9.99999999e+08
	// Minimum: 1
	Quantity int64 `json:"quantity,omitempty"`

	// Per-item price of the product. This value for this field cannot be negative.
	//
	// You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// You can include a decimal point (.), but you cannot include any other special characters.
	// The value is truncated to the correct number of decimal places.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either
	// the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)
	//
	// #### Tax Calculation
	// Required field for U.S., Canadian, international and value added taxes.
	//
	// #### Zero Amount Authorizations
	// If your processor supports zero amount authorizations, you can set this field to 0 for the
	// authorization to check if the card is lost or stolen.
	//
	// #### Maximum Field Lengths
	// For GPN and JCN Gateway: Decimal (10)
	// All other processors: Decimal (15)
	//
	// Max Length: 15
	UnitPrice string `json:"unitPrice,omitempty"`
}

// Validate validates this create invoice created body order information line items items0
func (o *CreateInvoiceCreatedBodyOrderInformationLineItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductSku(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationLineItemsItems0) validateProductName(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductName) { // not required
		return nil
	}

	if err := validate.MaxLength("productName", "body", string(o.ProductName), 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationLineItemsItems0) validateProductSku(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductSku) { // not required
		return nil
	}

	if err := validate.MaxLength("productSku", "body", string(o.ProductSku), 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationLineItemsItems0) validateQuantity(formats strfmt.Registry) error {

	if swag.IsZero(o.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", int64(o.Quantity), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", int64(o.Quantity), 9.99999999e+08, false); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceCreatedBodyOrderInformationLineItemsItems0) validateUnitPrice(formats strfmt.Registry) error {

	if swag.IsZero(o.UnitPrice) { // not required
		return nil
	}

	if err := validate.MaxLength("unitPrice", "body", string(o.UnitPrice), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationLineItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceCreatedBodyOrderInformationLineItemsItems0) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceCreatedBodyOrderInformationLineItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceDefaultBody invoicingV2InvoicesPost502Response
swagger:model CreateInvoiceDefaultBody
*/
type CreateInvoiceDefaultBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create invoice default body
func (o *CreateInvoiceDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceNotFoundBody invoicingV2InvoicesPost404Response
swagger:model CreateInvoiceNotFoundBody
*/
type CreateInvoiceNotFoundBody struct {

	// details
	Details []*CreateInvoiceNotFoundBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//
	Reason string `json:"reason,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	//  - NOTFOUND
	//
	//
	//
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this create invoice not found body
func (o *CreateInvoiceNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceNotFoundBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createInvoiceNotFound" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceNotFoundBodyDetailsItems0 create invoice not found body details items0
swagger:model CreateInvoiceNotFoundBodyDetailsItems0
*/
type CreateInvoiceNotFoundBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this create invoice not found body details items0
func (o *CreateInvoiceNotFoundBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceNotFoundBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceNotFoundBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceNotFoundBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceParamsBodyCustomerInformation Contains all of the customer-related fields for the invoice.
swagger:model CreateInvoiceParamsBodyCustomerInformation
*/
type CreateInvoiceParamsBodyCustomerInformation struct {

	// Customer's email address, including the full domain name.
	//
	// #### CyberSource through VisaNet
	// Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.
	//
	// **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.
	//
	// For processor-specific information, see the `customer_email` request-level field description in
	// [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html)
	//
	// #### Invoicing
	// Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won't work and you must resend the invoice with the new payment link.
	//
	// #### Chase Paymentech Solutions
	// Optional field.
	//
	// ####  Credit Mutuel-CIC
	// Optional field.
	//
	// #### OmniPay Direct
	// Optional field.
	//
	// #### SIX
	// Optional field.
	//
	// #### TSYS Acquiring Solutions
	// Required when `processingInformation.billPaymentOptions.billPayment=true` and `pointOfSaleInformation.entryMode=keyed`.
	//
	// #### Worldpay VAP
	// Optional field.
	//
	// #### All other processors
	// Not used.
	//
	// Max Length: 255
	Email string `json:"email,omitempty"`

	// Payer name for the invoice.
	// Max Length: 100
	Name string `json:"name,omitempty"`
}

// Validate validates this create invoice params body customer information
func (o *CreateInvoiceParamsBodyCustomerInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceParamsBodyCustomerInformation) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"customerInformation"+"."+"email", "body", string(o.Email), 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyCustomerInformation) validateName(formats strfmt.Registry) error {

	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"customerInformation"+"."+"name", "body", string(o.Name), 100); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyCustomerInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyCustomerInformation) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceParamsBodyCustomerInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceParamsBodyInvoiceInformation Contains all of the invoice-specific fields, such as the invoice number and due date.
swagger:model CreateInvoiceParamsBodyInvoiceInformation
*/
type CreateInvoiceParamsBodyInvoiceInformation struct {

	// If set to `true`, the payer can make a partial invoice payment.
	AllowPartialPayments bool `json:"allowPartialPayments,omitempty"`

	// If set to `None`, the invoice is created, and its status is set to 'CREATED', but no email is sent.
	//
	// Possible values:
	//  - `None`
	//  - `Email`
	//
	DeliveryMode string `json:"deliveryMode,omitempty"`

	// The description included in the invoice.
	// Max Length: 2000
	Description string `json:"description,omitempty"`

	// The invoice due date. This field is required for creating an invoice.
	// Format: `YYYY-MM-DD`, where `YYYY` = year, `MM` = month, and `DD` = day
	//
	// Format: date
	DueDate strfmt.Date `json:"dueDate,omitempty"`

	// Invoice Number.
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// If set to `true`, we send the invoice immediately. If set to `false`, the invoice remains in draft mode.
	SendImmediately bool `json:"sendImmediately,omitempty"`
}

// Validate validates this create invoice params body invoice information
func (o *CreateInvoiceParamsBodyInvoiceInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDueDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceParamsBodyInvoiceInformation) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"invoiceInformation"+"."+"description", "body", string(o.Description), 2000); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyInvoiceInformation) validateDueDate(formats strfmt.Registry) error {

	if swag.IsZero(o.DueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createInvoiceRequest"+"."+"invoiceInformation"+"."+"dueDate", "body", "date", o.DueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyInvoiceInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyInvoiceInformation) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceParamsBodyInvoiceInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceParamsBodyOrderInformation Contains all of the order-related fields for the invoice, such as the amount and line item details.
swagger:model CreateInvoiceParamsBodyOrderInformation
*/
type CreateInvoiceParamsBodyOrderInformation struct {

	// amount details
	AmountDetails *CreateInvoiceParamsBodyOrderInformationAmountDetails `json:"amountDetails,omitempty"`

	// line items
	// Max Items: 30
	LineItems []*CreateInvoiceParamsBodyOrderInformationLineItemsItems0 `json:"lineItems"`
}

// Validate validates this create invoice params body order information
func (o *CreateInvoiceParamsBodyOrderInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmountDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLineItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformation) validateAmountDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.AmountDetails) { // not required
		return nil
	}

	if o.AmountDetails != nil {
		if err := o.AmountDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceRequest" + "." + "orderInformation" + "." + "amountDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformation) validateLineItems(formats strfmt.Registry) error {

	if swag.IsZero(o.LineItems) { // not required
		return nil
	}

	iLineItemsSize := int64(len(o.LineItems))

	if err := validate.MaxItems("createInvoiceRequest"+"."+"orderInformation"+"."+"lineItems", "body", iLineItemsSize, 30); err != nil {
		return err
	}

	for i := 0; i < len(o.LineItems); i++ {
		if swag.IsZero(o.LineItems[i]) { // not required
			continue
		}

		if o.LineItems[i] != nil {
			if err := o.LineItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createInvoiceRequest" + "." + "orderInformation" + "." + "lineItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformation) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceParamsBodyOrderInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceParamsBodyOrderInformationAmountDetails Contains all of the amount-related fields in the invoice.
swagger:model CreateInvoiceParamsBodyOrderInformationAmountDetails
*/
type CreateInvoiceParamsBodyOrderInformationAmountDetails struct {

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	Currency string `json:"currency,omitempty"`

	// Total discount amount applied to the order.
	//
	// Max Length: 15
	DiscountAmount string `json:"discountAmount,omitempty"`

	// The total discount percentage applied to the invoice.
	DiscountPercent float64 `json:"discountPercent,omitempty"`

	// freight
	Freight *CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight `json:"freight,omitempty"`

	// The minimum partial amount required to pay the invoice.
	MinimumPartialAmount float64 `json:"minimumPartialAmount,omitempty"`

	// Sub-amount of the invoice.
	SubAmount float64 `json:"subAmount,omitempty"`

	// tax details
	TaxDetails *CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails `json:"taxDetails,omitempty"`

	// Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters.
	// CyberSource truncates the amount to the correct number of decimal places.
	//
	// **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.
	//
	// **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths. For details, see:
	// - "Authorization Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Capture Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	// - "Credit Information for Specific Processors" in the [Credit Card Services Using the SCMP API Guide](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/).
	//
	// If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen. For details, see "Zero Amount Authorizations," "Credit Information for Specific Processors" in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### Card Present
	// Required to include either this field or `orderInformation.lineItems[].unitPrice` for the order.
	//
	// #### Invoicing
	// Required for creating a new invoice.
	//
	// #### PIN Debit
	// Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request. For details, see `grand_total_amount` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in "Authorization Information for Specific Processors" of the [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
	//
	// #### DCC for First Data
	// Not used.
	//
	// Max Length: 19
	TotalAmount string `json:"totalAmount,omitempty"`
}

// Validate validates this create invoice params body order information amount details
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDiscountAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFreight(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(o.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"currency", "body", string(o.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) validateDiscountAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.DiscountAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"discountAmount", "body", string(o.DiscountAmount), 15); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) validateFreight(formats strfmt.Registry) error {

	if swag.IsZero(o.Freight) { // not required
		return nil
	}

	if o.Freight != nil {
		if err := o.Freight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceRequest" + "." + "orderInformation" + "." + "amountDetails" + "." + "freight")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) validateTaxDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.TaxDetails) { // not required
		return nil
	}

	if o.TaxDetails != nil {
		if err := o.TaxDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createInvoiceRequest" + "." + "orderInformation" + "." + "amountDetails" + "." + "taxDetails")
			}
			return err
		}
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) validateTotalAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.TotalAmount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"totalAmount", "body", string(o.TotalAmount), 19); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetails) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceParamsBodyOrderInformationAmountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight Contains all of the shipping-related fields for the invoice.
swagger:model CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight
*/
type CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight struct {

	// Total freight or shipping and handling charges for the order. When you include this field in your request, you
	// must also include the **totalAmount** field.
	//
	// For processor-specific information, see the freight_amount field in
	// [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
	//
	// Max Length: 13
	Amount string `json:"amount,omitempty"`

	// Flag that indicates whether an order is taxable. This value must be true if the sum of all _lineItems[].taxAmount_ values > 0.
	//
	// If you do not include any `lineItems[].taxAmount` values in your request, CyberSource does not include
	// `invoiceDetails.taxable` in the data it sends to the processor.
	//
	// For processor-specific information, see the `tax_indicator` field in
	// [Level II and Level III Processing Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html)
	//
	// Possible values:
	//  - **true**
	//  - **false**
	//
	Taxable bool `json:"taxable,omitempty"`
}

// Validate validates this create invoice params body order information amount details freight
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"freight"+"."+"amount", "body", string(o.Amount), 13); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceParamsBodyOrderInformationAmountDetailsFreight
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails Contains all of the tax-related fields for the invoice.
swagger:model CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails
*/
type CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails struct {

	// Indicates the amount of tax based on the `type` field as described in the table below:
	//
	// | type      | type description |
	// | ------------- |:-------------:|
	// | `alternate` | Total amount of alternate tax for the order. |
	// | `local`     | Sales tax for the order. |
	// | `national`  | National tax for the order. |
	// | `vat`       | Total amount of value added tax (VAT) included in the order. |
	// | `other`     | Other tax. |
	//
	// Max Length: 13
	Amount string `json:"amount,omitempty"`

	// Rate of VAT or other tax for the order.
	//
	// Example 0.040 (=4%)
	//
	// Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional
	// decimal places will be truncated)
	//
	// For processor-specific details, see the `alternate_tax_amount`, `vat_rate`, `vat_tax_rate`, `local_tax`, `national_tax`, `vat_tax_amount` or `other_tax#_rate` field descriptions in the [Level II and Level III Processing Using the SCMP API Guide.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
	//
	// Max Length: 6
	Rate string `json:"rate,omitempty"`

	// Indicates the type of tax data for the _taxDetails_ object.
	//
	// Possible values:
	//
	// - `alternate`
	// - `local`
	// - `national`
	// - `vat`
	// - `other`
	//
	// For processor-specific details, see the `alternate_tax_amount`, `local_tax`, `national_tax` or `vat_tax_amount` field
	// descriptions in [Level II and Level III Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Level_2_3_SCMP_API/html/)
	//
	Type string `json:"type,omitempty"`
}

// Validate validates this create invoice params body order information amount details tax details
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(o.Amount) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"taxDetails"+"."+"amount", "body", string(o.Amount), 13); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails) validateRate(formats strfmt.Registry) error {

	if swag.IsZero(o.Rate) { // not required
		return nil
	}

	if err := validate.MaxLength("createInvoiceRequest"+"."+"orderInformation"+"."+"amountDetails"+"."+"taxDetails"+"."+"rate", "body", string(o.Rate), 6); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceParamsBodyOrderInformationAmountDetailsTaxDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateInvoiceParamsBodyOrderInformationLineItemsItems0 List of the line items from the order, which are included in an invoice.
swagger:model CreateInvoiceParamsBodyOrderInformationLineItemsItems0
*/
type CreateInvoiceParamsBodyOrderInformationLineItemsItems0 struct {

	// For an authorization or capture transaction (`processingOptions.capture` is `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of
	// the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Max Length: 255
	ProductName string `json:"productName,omitempty"`

	// Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.
	//
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is required when `orderInformation.lineItems[].productCode` is not set to **default** or one of the other values that are related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes.
	// For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`), this field is
	// required when `orderInformation.lineItems[].productCode` is not `default` or one of the values related to shipping and/or handling.
	//
	// Max Length: 255
	ProductSku string `json:"productSku,omitempty"`

	// Number of units for this order. Must be a non-negative integer.
	//
	// The default is `1`. For an authorization or capture transaction (`processingOptions.capture` is set to `true` or `false`),
	// this field is required when `orderInformation.lineItems[].productCode` is not `default` or one of the other values
	// related to shipping and/or handling.
	//
	// #### Tax Calculation
	// Optional field for U.S., Canadian, international tax, and value added taxes.
	//
	// Maximum: 9.99999999e+08
	// Minimum: 1
	Quantity int64 `json:"quantity,omitempty"`

	// Per-item price of the product. This value for this field cannot be negative.
	//
	// You must include either this field or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// You can include a decimal point (.), but you cannot include any other special characters.
	// The value is truncated to the correct number of decimal places.
	//
	// #### DCC with a Third-Party Provider
	// Set this field to the converted amount that was returned by the DCC provider. You must include either
	// the 1st line item in the order and this field, or the request-level field `orderInformation.amountDetails.totalAmount` in your request.
	//
	// #### FDMS South
	// If you accept IDR or CLP currencies, see the entry for FDMS South in the [Merchant Descriptors Using the SCMP API Guide.]
	// (https://apps.cybersource.com/library/documentation/dev_guides/Merchant_Descriptors_SCMP_API/html/)
	//
	// #### Tax Calculation
	// Required field for U.S., Canadian, international and value added taxes.
	//
	// #### Zero Amount Authorizations
	// If your processor supports zero amount authorizations, you can set this field to 0 for the
	// authorization to check if the card is lost or stolen.
	//
	// #### Maximum Field Lengths
	// For GPN and JCN Gateway: Decimal (10)
	// All other processors: Decimal (15)
	//
	// Max Length: 15
	UnitPrice string `json:"unitPrice,omitempty"`
}

// Validate validates this create invoice params body order information line items items0
func (o *CreateInvoiceParamsBodyOrderInformationLineItemsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProductName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProductSku(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationLineItemsItems0) validateProductName(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductName) { // not required
		return nil
	}

	if err := validate.MaxLength("productName", "body", string(o.ProductName), 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationLineItemsItems0) validateProductSku(formats strfmt.Registry) error {

	if swag.IsZero(o.ProductSku) { // not required
		return nil
	}

	if err := validate.MaxLength("productSku", "body", string(o.ProductSku), 255); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationLineItemsItems0) validateQuantity(formats strfmt.Registry) error {

	if swag.IsZero(o.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", int64(o.Quantity), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", int64(o.Quantity), 9.99999999e+08, false); err != nil {
		return err
	}

	return nil
}

func (o *CreateInvoiceParamsBodyOrderInformationLineItemsItems0) validateUnitPrice(formats strfmt.Registry) error {

	if swag.IsZero(o.UnitPrice) { // not required
		return nil
	}

	if err := validate.MaxLength("unitPrice", "body", string(o.UnitPrice), 15); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationLineItemsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInvoiceParamsBodyOrderInformationLineItemsItems0) UnmarshalBinary(b []byte) error {
	var res CreateInvoiceParamsBodyOrderInformationLineItemsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
