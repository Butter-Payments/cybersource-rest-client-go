/**
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse201ProcessorInformationAvs', 'model/InlineResponse201ProcessorInformationCardVerification', 'model/InlineResponse201ProcessorInformationConsumerAuthenticationResponse', 'model/InlineResponse201ProcessorInformationCustomer', 'model/InlineResponse201ProcessorInformationElectronicVerificationResults', 'model/InlineResponse201ProcessorInformationIssuer', 'model/InlineResponse201ProcessorInformationMerchantAdvice'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./InlineResponse201ProcessorInformationAvs'), require('./InlineResponse201ProcessorInformationCardVerification'), require('./InlineResponse201ProcessorInformationConsumerAuthenticationResponse'), require('./InlineResponse201ProcessorInformationCustomer'), require('./InlineResponse201ProcessorInformationElectronicVerificationResults'), require('./InlineResponse201ProcessorInformationIssuer'), require('./InlineResponse201ProcessorInformationMerchantAdvice'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.InlineResponse201ProcessorInformation = factory(root.CyberSource.ApiClient, root.CyberSource.InlineResponse201ProcessorInformationAvs, root.CyberSource.InlineResponse201ProcessorInformationCardVerification, root.CyberSource.InlineResponse201ProcessorInformationConsumerAuthenticationResponse, root.CyberSource.InlineResponse201ProcessorInformationCustomer, root.CyberSource.InlineResponse201ProcessorInformationElectronicVerificationResults, root.CyberSource.InlineResponse201ProcessorInformationIssuer, root.CyberSource.InlineResponse201ProcessorInformationMerchantAdvice);
  }
}(this, function(ApiClient, InlineResponse201ProcessorInformationAvs, InlineResponse201ProcessorInformationCardVerification, InlineResponse201ProcessorInformationConsumerAuthenticationResponse, InlineResponse201ProcessorInformationCustomer, InlineResponse201ProcessorInformationElectronicVerificationResults, InlineResponse201ProcessorInformationIssuer, InlineResponse201ProcessorInformationMerchantAdvice) {
  'use strict';




  /**
   * The InlineResponse201ProcessorInformation model module.
   * @module model/InlineResponse201ProcessorInformation
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>InlineResponse201ProcessorInformation</code>.
   * @alias module:model/InlineResponse201ProcessorInformation
   * @class
   */
  var exports = function() {
    var _this = this;


























  };

  /**
   * Constructs a <code>InlineResponse201ProcessorInformation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/InlineResponse201ProcessorInformation} obj Optional instance to populate.
   * @return {module:model/InlineResponse201ProcessorInformation} The populated <code>InlineResponse201ProcessorInformation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('approvalCode')) {
        obj['approvalCode'] = ApiClient.convertToType(data['approvalCode'], 'String');
      }
      if (data.hasOwnProperty('transactionId')) {
        obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
      }
      if (data.hasOwnProperty('networkTransactionId')) {
        obj['networkTransactionId'] = ApiClient.convertToType(data['networkTransactionId'], 'String');
      }
      if (data.hasOwnProperty('providerTransactionId')) {
        obj['providerTransactionId'] = ApiClient.convertToType(data['providerTransactionId'], 'String');
      }
      if (data.hasOwnProperty('responseCode')) {
        obj['responseCode'] = ApiClient.convertToType(data['responseCode'], 'String');
      }
      if (data.hasOwnProperty('responseCodeSource')) {
        obj['responseCodeSource'] = ApiClient.convertToType(data['responseCodeSource'], 'String');
      }
      if (data.hasOwnProperty('responseDetails')) {
        obj['responseDetails'] = ApiClient.convertToType(data['responseDetails'], 'String');
      }
      if (data.hasOwnProperty('responseCategoryCode')) {
        obj['responseCategoryCode'] = ApiClient.convertToType(data['responseCategoryCode'], 'String');
      }
      if (data.hasOwnProperty('forwardedAcquirerCode')) {
        obj['forwardedAcquirerCode'] = ApiClient.convertToType(data['forwardedAcquirerCode'], 'String');
      }
      if (data.hasOwnProperty('avs')) {
        obj['avs'] = InlineResponse201ProcessorInformationAvs.constructFromObject(data['avs']);
      }
      if (data.hasOwnProperty('cardVerification')) {
        obj['cardVerification'] = InlineResponse201ProcessorInformationCardVerification.constructFromObject(data['cardVerification']);
      }
      if (data.hasOwnProperty('merchantAdvice')) {
        obj['merchantAdvice'] = InlineResponse201ProcessorInformationMerchantAdvice.constructFromObject(data['merchantAdvice']);
      }
      if (data.hasOwnProperty('electronicVerificationResults')) {
        obj['electronicVerificationResults'] = InlineResponse201ProcessorInformationElectronicVerificationResults.constructFromObject(data['electronicVerificationResults']);
      }
      if (data.hasOwnProperty('customer')) {
        obj['customer'] = InlineResponse201ProcessorInformationCustomer.constructFromObject(data['customer']);
      }
      if (data.hasOwnProperty('consumerAuthenticationResponse')) {
        obj['consumerAuthenticationResponse'] = InlineResponse201ProcessorInformationConsumerAuthenticationResponse.constructFromObject(data['consumerAuthenticationResponse']);
      }
      if (data.hasOwnProperty('issuer')) {
        obj['issuer'] = InlineResponse201ProcessorInformationIssuer.constructFromObject(data['issuer']);
      }
      if (data.hasOwnProperty('systemTraceAuditNumber')) {
        obj['systemTraceAuditNumber'] = ApiClient.convertToType(data['systemTraceAuditNumber'], 'String');
      }
      if (data.hasOwnProperty('paymentAccountReferenceNumber')) {
        obj['paymentAccountReferenceNumber'] = ApiClient.convertToType(data['paymentAccountReferenceNumber'], 'String');
      }
      if (data.hasOwnProperty('transactionIntegrityCode')) {
        obj['transactionIntegrityCode'] = ApiClient.convertToType(data['transactionIntegrityCode'], 'String');
      }
      if (data.hasOwnProperty('amexVerbalAuthReferenceNumber')) {
        obj['amexVerbalAuthReferenceNumber'] = ApiClient.convertToType(data['amexVerbalAuthReferenceNumber'], 'String');
      }
      if (data.hasOwnProperty('salesSlipNumber')) {
        obj['salesSlipNumber'] = ApiClient.convertToType(data['salesSlipNumber'], 'Number');
      }
      if (data.hasOwnProperty('masterCardServiceCode')) {
        obj['masterCardServiceCode'] = ApiClient.convertToType(data['masterCardServiceCode'], 'String');
      }
      if (data.hasOwnProperty('masterCardServiceReplyCode')) {
        obj['masterCardServiceReplyCode'] = ApiClient.convertToType(data['masterCardServiceReplyCode'], 'String');
      }
      if (data.hasOwnProperty('masterCardAuthenticationType')) {
        obj['masterCardAuthenticationType'] = ApiClient.convertToType(data['masterCardAuthenticationType'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
    }
    return obj;
  }

  /**
   * Authorization code. Returned only when the processor returns this value. 
   * @member {String} approvalCode
   */
  exports.prototype['approvalCode'] = undefined;
  /**
   * Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. 
   * @member {String} transactionId
   */
  exports.prototype['transactionId'] = undefined;
  /**
   * TBD
   * @member {String} networkTransactionId
   */
  exports.prototype['networkTransactionId'] = undefined;
  /**
   * TBD
   * @member {String} providerTransactionId
   */
  exports.prototype['providerTransactionId'] = undefined;
  /**
   * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. 
   * @member {String} responseCode
   */
  exports.prototype['responseCode'] = undefined;
  /**
   * Used by Visa only and contains the response source/reason code that identifies the source of the response decision. 
   * @member {String} responseCodeSource
   */
  exports.prototype['responseCodeSource'] = undefined;
  /**
   * This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. 
   * @member {String} responseDetails
   */
  exports.prototype['responseDetails'] = undefined;
  /**
   * Processor-defined response category code. The associated detail error code is in the auth_auth_response field or the auth_reversal_auth_ response field depending on which service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latinoâ€”processor transaction ID required for troubleshooting  **Maximum length for processors**:   - Comercio Latino: 32  - All other processors: 3 
   * @member {String} responseCategoryCode
   */
  exports.prototype['responseCategoryCode'] = undefined;
  /**
   * Name of the Japanese acquirer that processed the transaction. Returned only for CCS (CAFIS) and JCN Gateway. Please contact the CyberSource Japan Support Group for more information. 
   * @member {String} forwardedAcquirerCode
   */
  exports.prototype['forwardedAcquirerCode'] = undefined;
  /**
   * @member {module:model/InlineResponse201ProcessorInformationAvs} avs
   */
  exports.prototype['avs'] = undefined;
  /**
   * @member {module:model/InlineResponse201ProcessorInformationCardVerification} cardVerification
   */
  exports.prototype['cardVerification'] = undefined;
  /**
   * @member {module:model/InlineResponse201ProcessorInformationMerchantAdvice} merchantAdvice
   */
  exports.prototype['merchantAdvice'] = undefined;
  /**
   * @member {module:model/InlineResponse201ProcessorInformationElectronicVerificationResults} electronicVerificationResults
   */
  exports.prototype['electronicVerificationResults'] = undefined;
  /**
   * @member {module:model/InlineResponse201ProcessorInformationCustomer} customer
   */
  exports.prototype['customer'] = undefined;
  /**
   * @member {module:model/InlineResponse201ProcessorInformationConsumerAuthenticationResponse} consumerAuthenticationResponse
   */
  exports.prototype['consumerAuthenticationResponse'] = undefined;
  /**
   * @member {module:model/InlineResponse201ProcessorInformationIssuer} issuer
   */
  exports.prototype['issuer'] = undefined;
  /**
   * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.  **American Express Direct**  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  **CyberSource through VisaNet**  System trace number that must be printed on the customerâ€™s receipt. 
   * @member {String} systemTraceAuditNumber
   */
  exports.prototype['systemTraceAuditNumber'] = undefined;
  /**
   * Visa-generated reference number that identifies a card-present transaction for which youprovided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. 
   * @member {String} paymentAccountReferenceNumber
   */
  exports.prototype['paymentAccountReferenceNumber'] = undefined;
  /**
   * Transaction integrity classification provided by Mastercard. This value specifies Mastercardâ€™s evaluation of the transactionâ€™s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - **A1**: EMV or token in a secure, trusted environment  - **B1**: EMV or chip equivalent  - **C1**: Magnetic stripe  - **E1**: Key entered  - **U0**: Unclassified  For card-not-present transactions, possible values:   - **A2**: Digital transactions  - **B2**: Authenticated checkout  - **C2**: Transaction validation  - **D2**: Enhanced data  - **E2**: Generic messaging  - **U0**: Unclassified  For information about these values, contact Mastercard or your acquirer. 
   * @member {String} transactionIntegrityCode
   */
  exports.prototype['transactionIntegrityCode'] = undefined;
  /**
   * Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. 
   * @member {String} amexVerbalAuthReferenceNumber
   */
  exports.prototype['amexVerbalAuthReferenceNumber'] = undefined;
  /**
   * Transaction identifier that CyberSource generates. You have the option of printing the sales slip number on the receipt.  This field is supported only for **JCN Gateway**. 
   * @member {Number} salesSlipNumber
   */
  exports.prototype['salesSlipNumber'] = undefined;
  /**
   * Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service 
   * @member {String} masterCardServiceCode
   */
  exports.prototype['masterCardServiceCode'] = undefined;
  /**
   * Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - **C**: Service completed successfully.  - **F**: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - **I**: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - **T**: Invalid combination of token requestor ID and token.  - **U**: Expired token.  - **W**: Primary account number (PAN) listed in electronic warning bulletin.  Note This field is returned only for **CyberSource through VisaNet**. 
   * @member {String} masterCardServiceReplyCode
   */
  exports.prototype['masterCardServiceReplyCode'] = undefined;
  /**
   * Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - **1**: Transaction qualifies for Mastercard authentication type 1.  - **2**: Transaction qualifies for Mastercard authentication type 2. 
   * @member {String} masterCardAuthenticationType
   */
  exports.prototype['masterCardAuthenticationType'] = undefined;
  /**
   * Name of the Processor. 
   * @member {String} name
   */
  exports.prototype['name'] = undefined;



  return exports;
}));


