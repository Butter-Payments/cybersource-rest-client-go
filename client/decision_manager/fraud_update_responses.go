// Code generated by go-swagger; DO NOT EDIT.

package decision_manager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FraudUpdateReader is a Reader for the FraudUpdate structure.
type FraudUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FraudUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewFraudUpdateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFraudUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFraudUpdateCreated creates a FraudUpdateCreated with default headers values
func NewFraudUpdateCreated() *FraudUpdateCreated {
	return &FraudUpdateCreated{}
}

/*FraudUpdateCreated handles this case with default header values.

Successful response
*/
type FraudUpdateCreated struct {
	Payload *FraudUpdateCreatedBody
}

func (o *FraudUpdateCreated) Error() string {
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/marking][%d] fraudUpdateCreated  %+v", 201, o.Payload)
}

func (o *FraudUpdateCreated) GetPayload() *FraudUpdateCreatedBody {
	return o.Payload
}

func (o *FraudUpdateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FraudUpdateCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFraudUpdateBadRequest creates a FraudUpdateBadRequest with default headers values
func NewFraudUpdateBadRequest() *FraudUpdateBadRequest {
	return &FraudUpdateBadRequest{}
}

/*FraudUpdateBadRequest handles this case with default header values.

Invalid request
*/
type FraudUpdateBadRequest struct {
	Payload *FraudUpdateBadRequestBody
}

func (o *FraudUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /risk/v1/decisions/{id}/marking][%d] fraudUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *FraudUpdateBadRequest) GetPayload() *FraudUpdateBadRequestBody {
	return o.Payload
}

func (o *FraudUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(FraudUpdateBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*FraudUpdateBadRequestBody riskV1DecisionsPost400Response
swagger:model FraudUpdateBadRequestBody
*/
type FraudUpdateBadRequestBody struct {

	// details
	Details []*FraudUpdateBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible Values:
	// - `MISSING_FIELD`
	// - `INVALID_DATA`
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - INVALID_REQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this fraud update bad request body
func (o *FraudUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FraudUpdateBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fraudUpdateBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res FraudUpdateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateBadRequestBodyDetailsItems0 fraud update bad request body details items0
swagger:model FraudUpdateBadRequestBodyDetailsItems0
*/
type FraudUpdateBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this fraud update bad request body details items0
func (o *FraudUpdateBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res FraudUpdateBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateBody fraud update body
swagger:model FraudUpdateBody
*/
type FraudUpdateBody struct {

	// risk information
	// Required: true
	RiskInformation *FraudUpdateParamsBodyRiskInformation `json:"riskInformation"`
}

// Validate validates this fraud update body
func (o *FraudUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRiskInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FraudUpdateBody) validateRiskInformation(formats strfmt.Registry) error {

	if err := validate.Required("fraudMarkingActionRequest"+"."+"riskInformation", "body", o.RiskInformation); err != nil {
		return err
	}

	if o.RiskInformation != nil {
		if err := o.RiskInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudMarkingActionRequest" + "." + "riskInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateBody) UnmarshalBinary(b []byte) error {
	var res FraudUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateCreatedBody riskV1UpdatePost201Response
swagger:model FraudUpdateCreatedBody
*/
type FraudUpdateCreatedBody struct {

	// links
	Links *FraudUpdateCreatedBodyLinks `json:"_links,omitempty"`

	// client reference informaton
	ClientReferenceInformaton *FraudUpdateCreatedBodyClientReferenceInformaton `json:"clientReferenceInformaton,omitempty"`

	// An unique identification number to identify the submitted request. It is also appended to the endpoint of the resource.
	//
	// On incremental authorizations, this value with be the same as the identification number returned in the original authorization response.
	//
	// #### PIN debit
	// Returned for all PIN debit services.
	//
	// Max Length: 26
	ID string `json:"id,omitempty"`

	// The status for risk update 201 calls. Possible values are:
	// - INVALID_REQUEST
	// - COMPLETED
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this fraud update created body
func (o *FraudUpdateCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClientReferenceInformaton(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FraudUpdateCreatedBody) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(o.Links) { // not required
		return nil
	}

	if o.Links != nil {
		if err := o.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudUpdateCreated" + "." + "_links")
			}
			return err
		}
	}

	return nil
}

func (o *FraudUpdateCreatedBody) validateClientReferenceInformaton(formats strfmt.Registry) error {

	if swag.IsZero(o.ClientReferenceInformaton) { // not required
		return nil
	}

	if o.ClientReferenceInformaton != nil {
		if err := o.ClientReferenceInformaton.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudUpdateCreated" + "." + "clientReferenceInformaton")
			}
			return err
		}
	}

	return nil
}

func (o *FraudUpdateCreatedBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MaxLength("fraudUpdateCreated"+"."+"id", "body", string(o.ID), 26); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateCreatedBody) UnmarshalBinary(b []byte) error {
	var res FraudUpdateCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateCreatedBodyClientReferenceInformaton fraud update created body client reference informaton
swagger:model FraudUpdateCreatedBodyClientReferenceInformaton
*/
type FraudUpdateCreatedBodyClientReferenceInformaton struct {

	// Merchant-generated order reference or tracking number. It is recommended that you send a unique value for each
	// transaction so that you can perform meaningful searches for the transaction.
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// #### PIN Debit
	// Requests for PIN debit reversals need to use the same merchant reference number that was used in the transaction that is being
	// reversed.
	//
	// Required field for all PIN Debit requests (purchase, credit, and reversal).
	//
	// #### FDC Nashville Global
	// Certain circumstances can cause the processor to truncate this value to 15 or 17 characters for Level II and Level III processing, which can cause a discrepancy between the value you submit and the value included in some processor reports.
	//
	// Max Length: 50
	Code string `json:"code,omitempty"`
}

// Validate validates this fraud update created body client reference informaton
func (o *FraudUpdateCreatedBodyClientReferenceInformaton) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FraudUpdateCreatedBodyClientReferenceInformaton) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("fraudUpdateCreated"+"."+"clientReferenceInformaton"+"."+"code", "body", string(o.Code), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateCreatedBodyClientReferenceInformaton) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateCreatedBodyClientReferenceInformaton) UnmarshalBinary(b []byte) error {
	var res FraudUpdateCreatedBodyClientReferenceInformaton
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateCreatedBodyLinks fraud update created body links
swagger:model FraudUpdateCreatedBodyLinks
*/
type FraudUpdateCreatedBodyLinks struct {

	// self
	Self *FraudUpdateCreatedBodyLinksSelf `json:"self,omitempty"`
}

// Validate validates this fraud update created body links
func (o *FraudUpdateCreatedBodyLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FraudUpdateCreatedBodyLinks) validateSelf(formats strfmt.Registry) error {

	if swag.IsZero(o.Self) { // not required
		return nil
	}

	if o.Self != nil {
		if err := o.Self.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudUpdateCreated" + "." + "_links" + "." + "self")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateCreatedBodyLinks) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateCreatedBodyLinks) UnmarshalBinary(b []byte) error {
	var res FraudUpdateCreatedBodyLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateCreatedBodyLinksSelf fraud update created body links self
swagger:model FraudUpdateCreatedBodyLinksSelf
*/
type FraudUpdateCreatedBodyLinksSelf struct {

	// This is the endpoint of the resource that was created by the successful request.
	Href string `json:"href,omitempty"`

	// `method` refers to the HTTP method that you can send to the `self` endpoint to retrieve details of the resource.
	Method string `json:"method,omitempty"`
}

// Validate validates this fraud update created body links self
func (o *FraudUpdateCreatedBodyLinksSelf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateCreatedBodyLinksSelf) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateCreatedBodyLinksSelf) UnmarshalBinary(b []byte) error {
	var res FraudUpdateCreatedBodyLinksSelf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateParamsBodyRiskInformation fraud update params body risk information
swagger:model FraudUpdateParamsBodyRiskInformation
*/
type FraudUpdateParamsBodyRiskInformation struct {

	// marking details
	MarkingDetails *FraudUpdateParamsBodyRiskInformationMarkingDetails `json:"markingDetails,omitempty"`
}

// Validate validates this fraud update params body risk information
func (o *FraudUpdateParamsBodyRiskInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMarkingDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FraudUpdateParamsBodyRiskInformation) validateMarkingDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.MarkingDetails) { // not required
		return nil
	}

	if o.MarkingDetails != nil {
		if err := o.MarkingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fraudMarkingActionRequest" + "." + "riskInformation" + "." + "markingDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateParamsBodyRiskInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateParamsBodyRiskInformation) UnmarshalBinary(b []byte) error {
	var res FraudUpdateParamsBodyRiskInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*FraudUpdateParamsBodyRiskInformationMarkingDetails Details for marking the transaction.
swagger:model FraudUpdateParamsBodyRiskInformationMarkingDetails
*/
type FraudUpdateParamsBodyRiskInformationMarkingDetails struct {

	// This field can contain one of the following values:
	// - add: Mark as Suspect.
	// - clear: Clear Mark as Suspect.
	// - hide: Remove from history.
	//
	Action string `json:"action,omitempty"`

	// This field can contain one or more of the following values. When you specify more than one value, separate them with commas (,).
	// - `account_key_hash`
	// - `customer_account_id`
	// - `customer_email`
	// - `customer_ipaddress`
	// - `customer_phone`
	// - `device_fingerprint`
	// - `ship_address`
	// If no value is specified, `account_key_hash`, `customer_email`, and `ship_address` are used by default.
	// Note `account_key_hash` adds the field that contains the card number (`customer_cc_number`).
	//
	FieldsIncluded []string `json:"fieldsIncluded"`

	// Notes or details that explain the reasons for marking the transaction as suspect or otherwise.
	// Max Length: 120
	Notes string `json:"notes,omitempty"`

	// Reason for marking the transaction as suspect or otherwise. This field can contain one of the following values:
	// - `fraud_chargeback:` You have received a fraud-related chargeback for the transaction.
	// - `non_fraud_chargeback:` You have received a non-fraudulent chargeback for the transaction.
	// - `suspected:` You believe that you will probably receive a chargeback for the transaction.
	// - `creditback:` You issued a refund to the customer to avoid a chargeback for the transaction.
	//
	// Max Length: 25
	Reason string `json:"reason,omitempty"`
}

// Validate validates this fraud update params body risk information marking details
func (o *FraudUpdateParamsBodyRiskInformationMarkingDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FraudUpdateParamsBodyRiskInformationMarkingDetails) validateNotes(formats strfmt.Registry) error {

	if swag.IsZero(o.Notes) { // not required
		return nil
	}

	if err := validate.MaxLength("fraudMarkingActionRequest"+"."+"riskInformation"+"."+"markingDetails"+"."+"notes", "body", string(o.Notes), 120); err != nil {
		return err
	}

	return nil
}

func (o *FraudUpdateParamsBodyRiskInformationMarkingDetails) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(o.Reason) { // not required
		return nil
	}

	if err := validate.MaxLength("fraudMarkingActionRequest"+"."+"riskInformation"+"."+"markingDetails"+"."+"reason", "body", string(o.Reason), 25); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *FraudUpdateParamsBodyRiskInformationMarkingDetails) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FraudUpdateParamsBodyRiskInformationMarkingDetails) UnmarshalBinary(b []byte) error {
	var res FraudUpdateParamsBodyRiskInformationMarkingDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
