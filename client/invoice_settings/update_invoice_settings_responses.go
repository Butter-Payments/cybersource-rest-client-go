// Code generated by go-swagger; DO NOT EDIT.

package invoice_settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateInvoiceSettingsReader is a Reader for the UpdateInvoiceSettings structure.
type UpdateInvoiceSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInvoiceSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInvoiceSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInvoiceSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateInvoiceSettingsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateInvoiceSettingsOK creates a UpdateInvoiceSettingsOK with default headers values
func NewUpdateInvoiceSettingsOK() *UpdateInvoiceSettingsOK {
	return &UpdateInvoiceSettingsOK{}
}

/*UpdateInvoiceSettingsOK handles this case with default header values.

OK.
*/
type UpdateInvoiceSettingsOK struct {
	Payload *UpdateInvoiceSettingsOKBody
}

func (o *UpdateInvoiceSettingsOK) Error() string {
	return fmt.Sprintf("[PUT /invoicing/v2/invoiceSettings][%d] updateInvoiceSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateInvoiceSettingsOK) GetPayload() *UpdateInvoiceSettingsOKBody {
	return o.Payload
}

func (o *UpdateInvoiceSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateInvoiceSettingsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInvoiceSettingsBadRequest creates a UpdateInvoiceSettingsBadRequest with default headers values
func NewUpdateInvoiceSettingsBadRequest() *UpdateInvoiceSettingsBadRequest {
	return &UpdateInvoiceSettingsBadRequest{}
}

/*UpdateInvoiceSettingsBadRequest handles this case with default header values.

Could not update the invoice settings for this merchant.
*/
type UpdateInvoiceSettingsBadRequest struct {
	Payload *UpdateInvoiceSettingsBadRequestBody
}

func (o *UpdateInvoiceSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /invoicing/v2/invoiceSettings][%d] updateInvoiceSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInvoiceSettingsBadRequest) GetPayload() *UpdateInvoiceSettingsBadRequestBody {
	return o.Payload
}

func (o *UpdateInvoiceSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateInvoiceSettingsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInvoiceSettingsDefault creates a UpdateInvoiceSettingsDefault with default headers values
func NewUpdateInvoiceSettingsDefault(code int) *UpdateInvoiceSettingsDefault {
	return &UpdateInvoiceSettingsDefault{
		_statusCode: code,
	}
}

/*UpdateInvoiceSettingsDefault handles this case with default header values.

Unexpected error.
*/
type UpdateInvoiceSettingsDefault struct {
	_statusCode int

	Payload *UpdateInvoiceSettingsDefaultBody
}

// Code gets the status code for the update invoice settings default response
func (o *UpdateInvoiceSettingsDefault) Code() int {
	return o._statusCode
}

func (o *UpdateInvoiceSettingsDefault) Error() string {
	return fmt.Sprintf("[PUT /invoicing/v2/invoiceSettings][%d] updateInvoiceSettings default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateInvoiceSettingsDefault) GetPayload() *UpdateInvoiceSettingsDefaultBody {
	return o.Payload
}

func (o *UpdateInvoiceSettingsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateInvoiceSettingsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateInvoiceSettingsBadRequestBody invoicingV2InvoiceSettingsPut400Response
swagger:model UpdateInvoiceSettingsBadRequestBody
*/
type UpdateInvoiceSettingsBadRequestBody struct {

	// details
	Details []*UpdateInvoiceSettingsBadRequestBodyDetailsItems0 `json:"details"`

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//  - DUPLICATE_REQUEST
	//  - INVALID_MERCHANT_CONFIGURATION
	//  - PROCESSOR_UNAVAILABLE
	//
	Reason string `json:"reason,omitempty"`

	// The status of the invoice.
	//
	// Possible values:
	//   - BADREQUEST
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update invoice settings bad request body
func (o *UpdateInvoiceSettingsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInvoiceSettingsBadRequestBody) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(o.Details) { // not required
		return nil
	}

	for i := 0; i < len(o.Details); i++ {
		if swag.IsZero(o.Details[i]) { // not required
			continue
		}

		if o.Details[i] != nil {
			if err := o.Details[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("updateInvoiceSettingsBadRequest" + "." + "details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsBadRequestBodyDetailsItems0 update invoice settings bad request body details items0
swagger:model UpdateInvoiceSettingsBadRequestBodyDetailsItems0
*/
type UpdateInvoiceSettingsBadRequestBodyDetailsItems0 struct {

	// This is the flattened JSON object field name/path that is either missing or invalid.
	Field string `json:"field,omitempty"`

	// Possible reasons for the error.
	//
	// Possible values:
	//  - MISSING_FIELD
	//  - INVALID_DATA
	//
	Reason string `json:"reason,omitempty"`
}

// Validate validates this update invoice settings bad request body details items0
func (o *UpdateInvoiceSettingsBadRequestBodyDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsBadRequestBodyDetailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsBadRequestBodyDetailsItems0) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsBadRequestBodyDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsBody update invoice settings body
swagger:model UpdateInvoiceSettingsBody
*/
type UpdateInvoiceSettingsBody struct {

	// invoice settings information
	InvoiceSettingsInformation *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation `json:"invoiceSettingsInformation,omitempty"`
}

// Validate validates this update invoice settings body
func (o *UpdateInvoiceSettingsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInvoiceSettingsInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInvoiceSettingsBody) validateInvoiceSettingsInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.InvoiceSettingsInformation) { // not required
		return nil
	}

	if o.InvoiceSettingsInformation != nil {
		if err := o.InvoiceSettingsInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceSettingsRequest" + "." + "invoiceSettingsInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsBody) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsDefaultBody invoicingV2InvoiceSettingsPut502Response
swagger:model UpdateInvoiceSettingsDefaultBody
*/
type UpdateInvoiceSettingsDefaultBody struct {

	// The detail message related to the status and reason listed above.
	Message string `json:"message,omitempty"`

	// The reason of the status.
	//
	// Possible values:
	//  - SYSTEM_ERROR
	//  - SERVER_TIMEOUT
	//  - SERVICE_TIMEOUT
	//
	Reason string `json:"reason,omitempty"`

	// The status of the submitted transaction.
	//
	// Possible values:
	//  - SERVER_ERROR
	//
	Status string `json:"status,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update invoice settings default body
func (o *UpdateInvoiceSettingsDefaultBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsOKBody invoicingV2InvoiceSettingsPut200Response
swagger:model UpdateInvoiceSettingsOKBody
*/
type UpdateInvoiceSettingsOKBody struct {

	// invoice settings information
	InvoiceSettingsInformation *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation `json:"invoiceSettingsInformation,omitempty"`

	// Time of request in UTC. Format: `YYYY-MM-DDThh:mm:ssZ`
	// **Example** `2016-08-11T22:47:57Z` equals August 11, 2016, at 22:47:57 (10:47:57 p.m.).
	// The `T` separates the date and the time. The `Z` indicates UTC.
	//
	// Returned by authorization service.
	//
	// #### PIN debit
	// Time when the PIN debit credit, PIN debit purchase or PIN debit reversal was requested.
	//
	// Returned by PIN debit credit, PIN debit purchase or PIN debit reversal.
	//
	SubmitTimeUtc string `json:"submitTimeUtc,omitempty"`
}

// Validate validates this update invoice settings o k body
func (o *UpdateInvoiceSettingsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInvoiceSettingsInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInvoiceSettingsOKBody) validateInvoiceSettingsInformation(formats strfmt.Registry) error {

	if swag.IsZero(o.InvoiceSettingsInformation) { // not required
		return nil
	}

	if o.InvoiceSettingsInformation != nil {
		if err := o.InvoiceSettingsInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInvoiceSettingsOK" + "." + "invoiceSettingsInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation update invoice settings o k body invoice settings information
swagger:model UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation
*/
type UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation struct {

	// The content of the email message that we send to your customers.
	// Max Length: 2000
	CustomEmailMessage string `json:"customEmailMessage,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	DefaultCurrencyCode string `json:"defaultCurrencyCode,omitempty"`

	// The language of the email that we send to your customers. Possible values are `zh-CN`, `zh-TW`, `en-US`, `fr-FR`, `de-DE`, `ja-JP`, `pt-BR`, `ru-RU` and `es-419`.
	// Max Length: 6
	DeliveryLanguage string `json:"deliveryLanguage,omitempty"`

	// Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due.
	EnableReminders bool `json:"enableReminders,omitempty"`

	// header style
	HeaderStyle *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle `json:"headerStyle,omitempty"`

	// The merchant's display name shown on the invoice.
	// Max Length: 100
	MerchantDisplayName string `json:"merchantDisplayName,omitempty"`

	// The image file, which must be encoded in Base64 format. Supported file formats are `png`, `jpg`, and `gif`. The image file size restriction is 1 MB.
	// Max Length: 10000000
	MerchantLogo string `json:"merchantLogo,omitempty"`
}

// Validate validates this update invoice settings o k body invoice settings information
func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomEmailMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeliveryLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeaderStyle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantLogo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) validateCustomEmailMessage(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomEmailMessage) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"customEmailMessage", "body", string(o.CustomEmailMessage), 2000); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) validateDefaultCurrencyCode(formats strfmt.Registry) error {

	if swag.IsZero(o.DefaultCurrencyCode) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"defaultCurrencyCode", "body", string(o.DefaultCurrencyCode), 3); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) validateDeliveryLanguage(formats strfmt.Registry) error {

	if swag.IsZero(o.DeliveryLanguage) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"deliveryLanguage", "body", string(o.DeliveryLanguage), 6); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) validateHeaderStyle(formats strfmt.Registry) error {

	if swag.IsZero(o.HeaderStyle) { // not required
		return nil
	}

	if o.HeaderStyle != nil {
		if err := o.HeaderStyle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInvoiceSettingsOK" + "." + "invoiceSettingsInformation" + "." + "headerStyle")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) validateMerchantDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"merchantDisplayName", "body", string(o.MerchantDisplayName), 100); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) validateMerchantLogo(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantLogo) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"merchantLogo", "body", string(o.MerchantLogo), 10000000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsOKBodyInvoiceSettingsInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle update invoice settings o k body invoice settings information header style
swagger:model UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle
*/
type UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle struct {

	// The invoice background color. The format is a valid hexadecimal code prefixed with `#`, such as `#ffffff` for white.
	// Max Length: 7
	// Pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
	BackgroundColor string `json:"backgroundColor,omitempty"`

	// The invoice font color. The format is a valid hexadecimal code prefixed with `#`, such as `#000000` for black.
	// Max Length: 7
	// Pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
	FontColor string `json:"fontColor,omitempty"`
}

// Validate validates this update invoice settings o k body invoice settings information header style
func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackgroundColor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFontColor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle) validateBackgroundColor(formats strfmt.Registry) error {

	if swag.IsZero(o.BackgroundColor) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"backgroundColor", "body", string(o.BackgroundColor), 7); err != nil {
		return err
	}

	if err := validate.Pattern("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"backgroundColor", "body", string(o.BackgroundColor), `^#(?:[0-9a-fA-F]{3}){1,2}$`); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle) validateFontColor(formats strfmt.Registry) error {

	if swag.IsZero(o.FontColor) { // not required
		return nil
	}

	if err := validate.MaxLength("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"fontColor", "body", string(o.FontColor), 7); err != nil {
		return err
	}

	if err := validate.Pattern("updateInvoiceSettingsOK"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"fontColor", "body", string(o.FontColor), `^#(?:[0-9a-fA-F]{3}){1,2}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsOKBodyInvoiceSettingsInformationHeaderStyle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation update invoice settings params body invoice settings information
swagger:model UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation
*/
type UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation struct {

	// The content of the email message that we send to your customers.
	// Max Length: 2000
	CustomEmailMessage string `json:"customEmailMessage,omitempty"`

	// Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
	//
	// #### Used by
	// **Authorization**
	// Required field.
	//
	// **Authorization Reversal**
	// For an authorization reversal (`reversalInformation`) or a capture (`processingOptions.capture` is set to `true`), you must use the same currency that you used in your payment authorization request.
	//
	// #### PIN Debit
	// Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	// Returned by PIN debit purchase.
	//
	// For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing.
	// For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).
	//
	// Required field for PIN Debit purchase and PIN Debit credit requests.
	// Optional field for PIN Debit reversal requests.
	//
	// #### GPX
	// This field is optional for reversing an authorization or credit.
	//
	// #### DCC for First Data
	// Your local currency. For details, see the `currency` field description in [Dynamic Currency Conversion For First Data Using the SCMP API](http://apps.cybersource.com/library/documentation/dev_guides/DCC_FirstData_SCMP/DCC_FirstData_SCMP_API.pdf).
	//
	// #### Tax Calculation
	// Required for international tax and value added tax only.
	// Optional for U.S. and Canadian taxes.
	// Your local currency.
	//
	// Max Length: 3
	DefaultCurrencyCode string `json:"defaultCurrencyCode,omitempty"`

	// The language of the email that we send to your customers. Possible values are `zh-CN`, `zh-TW`, `en-US`, `fr-FR`, `de-DE`, `ja-JP`, `pt-BR`, `ru-RU` and `es-419`.
	// Max Length: 6
	DeliveryLanguage string `json:"deliveryLanguage,omitempty"`

	// Whether you would like us to send an auto-generated reminder email to your invoice recipients. Currently, this reminder email is sent five days before the invoice is due and one day after it is past due.
	EnableReminders bool `json:"enableReminders,omitempty"`

	// header style
	HeaderStyle *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle `json:"headerStyle,omitempty"`

	// The merchant's display name shown on the invoice.
	// Max Length: 100
	MerchantDisplayName string `json:"merchantDisplayName,omitempty"`

	// The image file, which must be encoded in Base64 format. Supported file formats are `png`, `jpg`, and `gif`. The image file size restriction is 1 MB.
	// Max Length: 10000000
	MerchantLogo string `json:"merchantLogo,omitempty"`
}

// Validate validates this update invoice settings params body invoice settings information
func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCustomEmailMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultCurrencyCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeliveryLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHeaderStyle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerchantLogo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) validateCustomEmailMessage(formats strfmt.Registry) error {

	if swag.IsZero(o.CustomEmailMessage) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"customEmailMessage", "body", string(o.CustomEmailMessage), 2000); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) validateDefaultCurrencyCode(formats strfmt.Registry) error {

	if swag.IsZero(o.DefaultCurrencyCode) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"defaultCurrencyCode", "body", string(o.DefaultCurrencyCode), 3); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) validateDeliveryLanguage(formats strfmt.Registry) error {

	if swag.IsZero(o.DeliveryLanguage) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"deliveryLanguage", "body", string(o.DeliveryLanguage), 6); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) validateHeaderStyle(formats strfmt.Registry) error {

	if swag.IsZero(o.HeaderStyle) { // not required
		return nil
	}

	if o.HeaderStyle != nil {
		if err := o.HeaderStyle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceSettingsRequest" + "." + "invoiceSettingsInformation" + "." + "headerStyle")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) validateMerchantDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantDisplayName) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"merchantDisplayName", "body", string(o.MerchantDisplayName), 100); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) validateMerchantLogo(formats strfmt.Registry) error {

	if swag.IsZero(o.MerchantLogo) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"merchantLogo", "body", string(o.MerchantLogo), 10000000); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle update invoice settings params body invoice settings information header style
swagger:model UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle
*/
type UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle struct {

	// The invoice background color. The format is a valid hexadecimal code prefixed with `#`, such as `#ffffff` for white.
	// Max Length: 7
	// Pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
	BackgroundColor string `json:"backgroundColor,omitempty"`

	// The invoice font color. The format is a valid hexadecimal code prefixed with `#`, such as `#000000` for black.
	// Max Length: 7
	// Pattern: ^#(?:[0-9a-fA-F]{3}){1,2}$
	FontColor string `json:"fontColor,omitempty"`
}

// Validate validates this update invoice settings params body invoice settings information header style
func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBackgroundColor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFontColor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle) validateBackgroundColor(formats strfmt.Registry) error {

	if swag.IsZero(o.BackgroundColor) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"backgroundColor", "body", string(o.BackgroundColor), 7); err != nil {
		return err
	}

	if err := validate.Pattern("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"backgroundColor", "body", string(o.BackgroundColor), `^#(?:[0-9a-fA-F]{3}){1,2}$`); err != nil {
		return err
	}

	return nil
}

func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle) validateFontColor(formats strfmt.Registry) error {

	if swag.IsZero(o.FontColor) { // not required
		return nil
	}

	if err := validate.MaxLength("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"fontColor", "body", string(o.FontColor), 7); err != nil {
		return err
	}

	if err := validate.Pattern("invoiceSettingsRequest"+"."+"invoiceSettingsInformation"+"."+"headerStyle"+"."+"fontColor", "body", string(o.FontColor), `^#(?:[0-9a-fA-F]{3}){1,2}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle) UnmarshalBinary(b []byte) error {
	var res UpdateInvoiceSettingsParamsBodyInvoiceSettingsInformationHeaderStyle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
