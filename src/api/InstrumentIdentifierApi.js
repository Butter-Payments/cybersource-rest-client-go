/**
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Body', 'model/Body1', 'model/InlineResponse2007', 'model/InlineResponse2008', 'model/InlineResponse4006', 'model/InlineResponse409'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Body'), require('../model/Body1'), require('../model/InlineResponse2007'), require('../model/InlineResponse2008'), require('../model/InlineResponse4006'), require('../model/InlineResponse409'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.InstrumentIdentifierApi = factory(root.CyberSource.ApiClient, root.CyberSource.Body, root.CyberSource.Body1, root.CyberSource.InlineResponse2007, root.CyberSource.InlineResponse2008, root.CyberSource.InlineResponse4006, root.CyberSource.InlineResponse409);
  }
}(this, function(ApiClient, Body, Body1, InlineResponse2007, InlineResponse2008, InlineResponse4006, InlineResponse409) {
  'use strict';

  /**
   * InstrumentIdentifier service.
   * @module api/InstrumentIdentifierApi
   * @version 0.0.1
   */

  /**
   * Constructs a new InstrumentIdentifierApi. 
   * @alias module:api/InstrumentIdentifierApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the instrumentidentifiersPost operation.
     * @callback module:api/InstrumentIdentifierApi~instrumentidentifiersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Instrument Identifier
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {Object} opts Optional parameters
     * @param {module:model/Body} opts.body Please specify either a Card or Bank Account.
     * @param {module:api/InstrumentIdentifierApi~instrumentidentifiersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.instrumentidentifiersPost = function(profileId, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling instrumentidentifiersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/tms/v1/instrumentidentifiers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the instrumentidentifiersTokenIdDelete operation.
     * @callback module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an Instrument Identifier
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} tokenId The TokenId of an Instrument Identifier.
     * @param {module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.instrumentidentifiersTokenIdDelete = function(profileId, tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling instrumentidentifiersTokenIdDelete");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling instrumentidentifiersTokenIdDelete");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tms/v1/instrumentidentifiers/{tokenId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the instrumentidentifiersTokenIdGet operation.
     * @callback module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Instrument Identifier
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} tokenId The TokenId of an Instrument Identifier.
     * @param {module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.instrumentidentifiersTokenIdGet = function(profileId, tokenId, callback) {
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling instrumentidentifiersTokenIdGet");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling instrumentidentifiersTokenIdGet");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/tms/v1/instrumentidentifiers/{tokenId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the instrumentidentifiersTokenIdPatch operation.
     * @callback module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Instrument Identifier
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} tokenId The TokenId of an Instrument Identifier
     * @param {module:model/Body1} body Please specify the previous transaction Id to update.
     * @param {module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.instrumentidentifiersTokenIdPatch = function(profileId, tokenId, body, callback) {
      var postBody = body;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling instrumentidentifiersTokenIdPatch");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling instrumentidentifiersTokenIdPatch");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling instrumentidentifiersTokenIdPatch");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/tms/v1/instrumentidentifiers/{tokenId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the instrumentidentifiersTokenIdPaymentinstrumentsGet operation.
     * @callback module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdPaymentinstrumentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all Payment Instruments associated with an Instrument Identifier
     * @param {String} profileId The id of a profile containing user specific TMS configuration.
     * @param {String} tokenId The TokenId of an Instrument Identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0.
     * @param {String} opts.limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (default to 20)
     * @param {module:api/InstrumentIdentifierApi~instrumentidentifiersTokenIdPaymentinstrumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    this.instrumentidentifiersTokenIdPaymentinstrumentsGet = function(profileId, tokenId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling instrumentidentifiersTokenIdPaymentinstrumentsGet");
      }

      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling instrumentidentifiersTokenIdPaymentinstrumentsGet");
      }


      var pathParams = {
        'tokenId': tokenId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
        'profile-id': profileId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
