/**
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CyberSource) {
      root.CyberSource = {};
    }
    root.CyberSource.V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction = factory(root.CyberSource.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction model module.
   * @module model/V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction</code>.
   * @alias module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction
   * @class
   */
  var exports = function() {
    var _this = this;



  };

  /**
   * Constructs a <code>V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction} obj Optional instance to populate.
   * @return {module:model/V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction} The populated <code>V2paymentsProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('reason')) {
        obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
      }
      if (data.hasOwnProperty('previousTransactionId')) {
        obj['previousTransactionId'] = ApiClient.convertToType(data['previousTransactionId'], 'String');
      }
    }
    return obj;
  }

  /**
   * Reason for the merchant-initiated transaction. Possible values:   - **1**: Resubmission  - **2**: Delayed charge  - **3**: Reauthorization for split shipment  - **4**: No show  - **5**: Account top up  This field is not required for installment payments or recurring payments or when _reAuth.first_ is true. It is required for all other merchant-initiated transactions. This field is supported only for Visa transactions on CyberSource through VisaNet. 
   * @member {String} reason
   */
  exports.prototype['reason'] = undefined;
  /**
   * Transaction identifier that was returned in the payment response field _processorInformation.transactionID_ in the reply message for either the original merchant initiated payment in the series or the previous merchant-initiated payment in the series. <p/> If the current payment request includes a token instead of an account number, the following time limits apply for the value of this field:  For a **resubmission**, the transaction ID must be less than 14 days old.  For a **delayed charge** or **reauthorization**, the transaction ID must be less than 30 days old.  The value for this field does not correspond to any data in the TC 33 capture file. This field is supported only for Visa transactions on CyberSource through VisaNet. 
   * @member {String} previousTransactionId
   */
  exports.prototype['previousTransactionId'] = undefined;



  return exports;
}));


